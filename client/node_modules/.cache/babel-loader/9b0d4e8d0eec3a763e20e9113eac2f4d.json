{"ast":null,"code":"var _jsxFileName = \"/home/tarun/learning/myOwnProject/nodejs-express-mongodb/frontend/location/src/components/dashboard/rightSection/dataCompletnessChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getSqoopData, getSqoopDataWithTimeWindow, getMaxwellDataWithTimwWindow, getMongoDataWithTimeWindow } from '../../../actions/dataActions';\nimport Chart from 'chart.js/auto';\nimport ChartDataLabels from 'chartjs-plugin-datalabels'; // import Calendar from 'react-calendar';\n\nimport './dataCompletnessChart.scss';\nimport Sqoop from './dataCompletnessChart/sqoop'; // import 'react-calendar/dist/Calendar.css';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst chart = {\n  sqoopChart: null,\n  maxwellChartOne: null,\n  mongoChart: null\n};\nexport default function Stacked() {\n  _s();\n\n  var _events$ingestionStra5, _events$ingestionStra6, _events$sourceType3, _events$sourceType4, _events$ingestionStra7;\n\n  const events = useSelector(state => state.dataReducer.selectedEventMeta[0]);\n  const sqoopCount = useSelector(state => state.dataReducer.sqoopCount);\n  const maxwellCount = useSelector(state => state.dataReducer.maxwellCount);\n  const mongoCount = useSelector(state => state.dataReducer.mongoCount);\n  const selectedTenant = useSelector(state => state.dataReducer.selectedTenant);\n  const selectedEvent = useSelector(state => state.dataReducer.selectedEvent);\n  const [startDate, setStartDate] = useState();\n  const [timeWindow, setTimeWindow] = useState(7);\n  const [validDate, setValidDate] = useState(true); // const processedRecordsCount = sqoopCount[0] ? sqoopCount[0] : 0\n\n  const [sqoopSourceData, setSqoopSourceData] = useState(null);\n  const [sqoopDatalakeData, setSqoopDatalakeData] = useState(null);\n  const [sqoopSourceDataColor, setSqoopSourceDataColor] = useState(null);\n  const [sqoopDatalakeDataColor, setSqoopDatalakeDataColor] = useState(null);\n  const [sqoopCountDate, setSqoopCountDate] = useState(null);\n  const [sqoopThresholdBreached, setSqoopThresholdBreached] = useState(false);\n  const [sqoopThresholdBreachedCount, setSqoopThresholdBreachedCount] = useState(false);\n  const [maxwellSourceInsert, setMaxwellSourceInsert] = useState(null);\n  const [InsertPresent, setInsertPresent] = useState(false);\n  const [maxwellDatalakeInsert, setMaxwellDatalakeInsert] = useState(null);\n  const [maxwellSourceUpdate, setMaxwellSourceUpdate] = useState(null);\n  const [UpdatePresent, setUpdatePresent] = useState(false);\n  const [maxwellDatalakeUpdate, setMaxwellDatalakeUpdate] = useState(null);\n  const [maxwellSourceDelete, setMaxwellSourceDelete] = useState(null);\n  const [DeletePresent, setDeletePresent] = useState(false);\n  const [maxwellDatalakeDelete, setMaxwellDatalakeDelete] = useState(null);\n  const [maxwellDate, setMaxwellDate] = useState(null);\n  const [maxwellSourceInsertHovColor, setMaxwellSourceInsertHovColor] = useState(null);\n  const [maxwellDatalakeInsertHovColor, setMaxwellDatalakeInsertHovColor] = useState(null);\n  const [maxwellSourceUpdateHovColor, setMaxwellSourceUpdateHovColor] = useState(null);\n  const [maxwellDatalakeUpdateHovColor, setMaxwellDatalakeUpdateHovColor] = useState(null);\n  const [maxwellSourceDeleteHovColor, setMaxwellSourceDeleteHovColor] = useState(null);\n  const [maxwellDatalakeDeleteHovColor, setMaxwellDatalakeDeleteHovColor] = useState(null);\n  const [thresholdBreached, setThresholdBreached] = useState(false);\n  const [maxwellThresholdBreachedCount, setMaxwellThresholdBreachedCount] = useState(false);\n  const [mongoSourceInsert, setMongoSourceInsert] = useState(null);\n  const [mongoDatalakeInsert, setMongoDatalakeInsert] = useState(null);\n  const [mongoInsertPresent, setMongoInsertPresent] = useState(false);\n  const [mongoSourceUpdate, setMongoSourceUpdate] = useState(null);\n  const [mongoDatalakeUpdate, setMongoDatalakeUpdate] = useState(null);\n  const [mongoUpdatePresent, setMongoUpdatePresent] = useState(false);\n  const [mongoSourceDelete, setMongoSourceDelete] = useState(null);\n  const [mongoDatalakeDelete, setMongoDatalakeDelete] = useState(null);\n  const [mongoDeletePresent, setMongoDeletePresent] = useState(false);\n  const [mongoSourceReplace, setMongoSourceReplace] = useState(null);\n  const [mongoDatalakeReplace, setMongoDatalakeReplace] = useState(null);\n  const [mongoReplacePresent, setMongoReplacePresent] = useState(false);\n  const [mongoDate, setMongoDate] = useState(null);\n  const [mongoSourceInsertBackgroundColor, setMongoSourceInsertBackgroundColor] = useState(null);\n  const [mongoDatalakeInsertBackgroundColor, setMongoDatalakeInsertBackgroundColor] = useState(null);\n  const [mongoSourceUpdateBackgroundColor, setMongoSourceUpdateBackgroundColor] = useState(null);\n  const [mongoDatalakeUpdateBackgroundColor, setMongoDatalakeUpdateBackgroundColor] = useState(null);\n  const [mongoSourceDeleteBackgroundColor, setMongoSourceDeleteBackgroundColor] = useState(null);\n  const [mongoDatalakeDeleteBackgroundColor, setMongoDatalakeDeleteBackgroundColor] = useState(null);\n  const [mongoSourceReplaceBackgroundColor, setMongoSourceReplaceBackgroundColor] = useState(null);\n  const [mongoDatalakeReplaceBackgroundColor, setMongoDatalakeReplaceBackgroundColor] = useState(null);\n  const [mongoThresholdBreached, setMongoThresholdBreached] = useState(false);\n  const [mongoThresholdBreachedCount, setMongoThresholdBreachedCount] = useState(false);\n  const mongoDataset = [];\n  const maxwellDataset = [];\n  let maxwellChartOneDataset = [];\n  const [checking, setChecking] = useState({\n    'insert': false,\n    'update': false,\n    'delete': false,\n    'count': false\n  });\n  const dispatch = useDispatch();\n\n  const createMaxwellChartOne = () => {\n    const ctxFour = document.getElementById('myChart-maxwell-one').getContext('2d');\n    chart.maxwellChartOne = new Chart(ctxFour, {\n      type: 'bar',\n      data: {\n        labels: [1],\n        datasets: maxwellChartOneDataset\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            stacked: false\n          }\n        }\n      }\n    });\n  };\n\n  useEffect(() => {\n    var _events$ingestionStra, _events$ingestionStra2, _events$sourceType;\n\n    let chartStatus = Chart.getChart(\"myChart-stack\");\n    let chartStatus1 = Chart.getChart(\"myChart-maxwell\");\n    let chartStatus2 = Chart.getChart(\"myChart-mongo\");\n\n    if (((_events$ingestionStra = events['ingestionStrategy']) === null || _events$ingestionStra === void 0 ? void 0 : _events$ingestionStra.toLowerCase()) == 'sqoop' && sqoopCount.length !== 0) {\n      createChart();\n      getsqoopValue();\n    } else if (((_events$ingestionStra2 = events['ingestionStrategy']) === null || _events$ingestionStra2 === void 0 ? void 0 : _events$ingestionStra2.toLowerCase()) == 'maxwell' && maxwellCount.length !== 0) {\n      // createMaxwellChart()\n      createMaxwellChartOne();\n      getMaxwellValue();\n    } else if (((_events$sourceType = events['sourceType']) === null || _events$sourceType === void 0 ? void 0 : _events$sourceType.toLowerCase()) == 'mongo' && mongoCount) {\n      createMongoChart();\n      getMongoValue();\n    }\n  }, []);\n\n  const getsqoopValue = () => {\n    let requiredLength = sqoopCount.length <= 7 ? sqoopCount.length : 7;\n    let source = [];\n    let datalake = [];\n    let date = [];\n    let sourceColor = [];\n    let datalakeColor = [];\n    let thresholdCount = 0;\n\n    for (let index = 0; index < requiredLength; index++) {\n      source.push(sqoopCount[index]['count']);\n      datalake.push(sqoopCount[index]['datalakeCount']);\n\n      if (sqoopCount[index]['isValidated'] === \"SUCCESS\") {\n        sourceColor.push('rgba(0, 0, 255, 0.5)');\n        datalakeColor.push('rgba(0, 0, 0, 0.2)');\n      } else {\n        thresholdCount += 1;\n        setSqoopThresholdBreached(true);\n        sourceColor.push('rgb(238, 94, 94)');\n        datalakeColor.push('red');\n      }\n\n      if (!date.includes(sqoopCount[index]['updatedOn'].slice(0, 10))) {\n        date.push(sqoopCount[index]['updatedOn'].slice(0, 10));\n      }\n    }\n\n    ;\n\n    if (thresholdCount === requiredLength) {\n      setSqoopThresholdBreachedCount(true);\n    }\n\n    setSqoopSourceData(source);\n    setSqoopDatalakeData(datalake);\n    setSqoopSourceDataColor(sourceColor);\n    setSqoopDatalakeDataColor(datalakeColor);\n    setSqoopCountDate(date);\n    setStartDate(date[0]);\n  };\n\n  const getMaxwellValue = () => {\n    let requiredLength = maxwellCount.length;\n    let sourceInsert = [];\n    let datalakeInsert = [];\n    let sourceUpdate = [];\n    let datalakeUpdate = [];\n    let sourceDelete = [];\n    let datalakeDelete = [];\n    let date = [];\n    let sourceInsertHovColor = [];\n    let datalakeInsertHovColor = [];\n    let sourceUpdateHovColor = [];\n    let datalakeUpdateHovColor = [];\n    let sourceDeleteHovColor = [];\n    let datalakeDeleteHovColor = [];\n    let thresholdCount = 0;\n\n    for (let index = 0; index < requiredLength; index++) {\n      if (maxwellCount[index]['queryType'] === 'insert') {\n        setInsertPresent(true);\n        sourceInsert.push(maxwellCount[index]['count']);\n        datalakeInsert.push(maxwellCount[index]['datalakeCount']);\n\n        if (maxwellCount[index]['isValidated'] === 'SUCCESS') {\n          sourceInsertHovColor.push('rgba(70, 69, 69, 0.2)');\n          datalakeInsertHovColor.push('rgba(0, 0, 0, 0.2)');\n        } else {\n          sourceInsertHovColor.push('rgb(238, 94, 94)');\n          datalakeInsertHovColor.push('red');\n        }\n      }\n\n      if (maxwellCount[index]['queryType'] === 'update') {\n        setUpdatePresent(true);\n        sourceUpdate.push(maxwellCount[index]['count']);\n        datalakeUpdate.push(maxwellCount[index]['datalakeCount']);\n\n        if (maxwellCount[index]['isValidated'] === 'SUCCESS') {\n          sourceUpdateHovColor.push('rgb(252, 204, 115)');\n          datalakeUpdateHovColor.push('rgb(250, 188, 74)');\n        } else {\n          sourceUpdateHovColor.push('rgb(238, 94, 94)');\n          datalakeUpdateHovColor.push('red');\n        }\n      }\n\n      if (maxwellCount[index]['queryType'] === 'delete') {\n        setDeletePresent(true);\n        sourceDelete.push(maxwellCount[index]['datalakeCount']);\n        datalakeDelete.push(maxwellCount[index]['count']);\n\n        if (maxwellCount[index]['isValidated'] === 'SUCCESS') {\n          sourceDeleteHovColor.push('rgba(86, 86, 252, 0.5)');\n          datalakeDeleteHovColor.push('rgba(0, 0, 255, 0.5)'); // datalakeDeleteHovColor.push('rgba(86, 86, 252, 0.5)')\n        } else {\n          sourceDeleteHovColor.push('rgb(238, 94, 94)');\n          datalakeDeleteHovColor.push('red');\n        }\n      }\n\n      if (!date.includes(maxwellCount[index]['computedDate'].slice(0, 10))) {\n        date.push(maxwellCount[index]['computedDate'].slice(0, 10));\n      }\n\n      if (maxwellCount[index]['isValidated'] !== 'SUCCESS') {\n        thresholdCount += 1;\n        setThresholdBreached(true);\n      }\n    }\n\n    ;\n\n    if (thresholdCount === requiredLength) {\n      setMaxwellThresholdBreachedCount(true);\n    }\n\n    setMaxwellSourceInsert(sourceInsert);\n    setMaxwellDatalakeInsert(datalakeInsert);\n    setMaxwellSourceUpdate(sourceUpdate);\n    setMaxwellDatalakeUpdate(datalakeUpdate);\n    setMaxwellSourceDelete(sourceDelete);\n    setMaxwellDatalakeDelete(datalakeDelete);\n    setMaxwellDate(date);\n    setStartDate(date[0]);\n    setMaxwellSourceInsertHovColor(sourceInsertHovColor);\n    setMaxwellDatalakeInsertHovColor(datalakeInsertHovColor);\n    setMaxwellSourceUpdateHovColor(sourceUpdateHovColor);\n    setMaxwellDatalakeUpdateHovColor(datalakeUpdateHovColor);\n    setMaxwellSourceDeleteHovColor(sourceDeleteHovColor);\n    setMaxwellDatalakeDeleteHovColor(datalakeDeleteHovColor);\n  }; // for mongo \n\n\n  const getMongoValue = () => {\n    let requiredLength = mongoCount.length;\n    let sourceInsert = [];\n    let datalakeInsert = [];\n    let sourceUpdate = [];\n    let datalakeUpdate = [];\n    let sourceDelete = [];\n    let datalakeDelete = [];\n    let sourceReplace = [];\n    let datalakeReplace = [];\n    let date = [];\n    let thresholdCount = 0;\n    let sourceInsertBackgroundColor = [];\n    let datalakeInsertBackgroundColor = [];\n    let sourceUpdateBackgroundColor = [];\n    let datalakeUpdateBackgroundColor = [];\n    let sourceDeleteBackgroundColor = [];\n    let datalakeDeleteBackgroundColor = [];\n    let sourceReplaceBackgroundColor = [];\n    let datalakeReplaceBackgroundColor = [];\n\n    for (let index = 0; index < requiredLength; index++) {\n      if (mongoCount[index]['queryType'] === 'insert') {\n        setMongoInsertPresent(true);\n        sourceInsert.push(mongoCount[index]['count']);\n        datalakeInsert.push(mongoCount[index]['datalakeCount']);\n\n        if (mongoCount[index]['isValidated'] === 'SUCCESS') {\n          sourceInsertBackgroundColor.push('rgba(70, 69, 69, 0.2)');\n          datalakeInsertBackgroundColor.push('rgba(0, 0, 0, 0.2)');\n        } else {\n          sourceInsertBackgroundColor.push('rgb(238, 94, 94)');\n          datalakeInsertBackgroundColor.push('red');\n        }\n      }\n\n      if (mongoCount[index]['queryType'] === 'update') {\n        setMongoUpdatePresent(true);\n        sourceUpdate.push(mongoCount[index]['count']);\n        datalakeUpdate.push(mongoCount[index]['datalakeCount']);\n\n        if (mongoCount[index]['isValidated'] === 'SUCCESS') {\n          sourceUpdateBackgroundColor.push('rgb(252, 204, 115)');\n          datalakeUpdateBackgroundColor.push('rgb(250, 188, 74)');\n        } else {\n          sourceUpdateBackgroundColor.push('rgb(238, 94, 94)');\n          datalakeUpdateBackgroundColor.push('red');\n        }\n      }\n\n      if (mongoCount[index]['queryType'] === 'delete') {\n        setMongoDeletePresent(true);\n        sourceDelete.push(mongoCount[index]['count']);\n        datalakeDelete.push(mongoCount[index]['datalakeCount']);\n\n        if (mongoCount[index]['isValidated'] === 'SUCCESS') {\n          sourceDeleteBackgroundColor.push('rgba(86, 86, 252, 0.5)');\n          datalakeDeleteBackgroundColor.push('rgba(0, 0, 255, 0.5)'); // datalakeDeleteBackgroundColor.push('rgba(86, 86, 252, 0.5)')\n        } else {\n          sourceDeleteBackgroundColor.push('rgb(238, 94, 94)');\n          datalakeDeleteBackgroundColor.push('red');\n        }\n      }\n\n      if (mongoCount[index]['queryType'] === 'replace') {\n        setMongoReplacePresent(true);\n        sourceReplace.push(mongoCount[index]['count']);\n        datalakeReplace.push(mongoCount[index]['datalakeCount']);\n\n        if (mongoCount[index]['isValidated'] === 'SUCCESS') {\n          sourceReplaceBackgroundColor.push('rgb(173, 243, 115)');\n          datalakeReplaceBackgroundColor.push('rgb(116, 240, 15)'); // datalakeDeleteBackgroundColor.push('rgba(86, 86, 252, 0.5)')\n        } else {\n          sourceReplaceBackgroundColor.push('rgb(238, 94, 94)');\n          datalakeReplaceBackgroundColor.push('red');\n        }\n      }\n\n      if (!date.includes(mongoCount[index]['computedDate'].slice(0, 10))) {\n        date.push(mongoCount[index]['computedDate'].slice(0, 10));\n      }\n\n      if (mongoCount[index]['isValidated'] !== 'SUCCESS') {\n        thresholdCount += 1;\n        setMongoThresholdBreached(true);\n      }\n    }\n\n    ;\n\n    if (thresholdCount === requiredLength) {\n      setMongoThresholdBreachedCount(true);\n    }\n\n    setMongoSourceInsert(sourceInsert);\n    setMongoDatalakeInsert(datalakeInsert);\n    setMongoSourceUpdate(sourceUpdate);\n    setMongoDatalakeUpdate(datalakeUpdate);\n    setMongoSourceDelete(sourceDelete);\n    setMongoDatalakeDelete(datalakeDelete);\n    setMongoSourceReplace(sourceReplace);\n    setMongoDatalakeReplace(datalakeReplace);\n    setMongoSourceReplaceBackgroundColor(sourceReplaceBackgroundColor);\n    setMongoDatalakeReplaceBackgroundColor(datalakeReplaceBackgroundColor);\n    setMongoSourceInsertBackgroundColor(sourceInsertBackgroundColor);\n    setMongoDatalakeInsertBackgroundColor(datalakeInsertBackgroundColor);\n    setMongoSourceUpdateBackgroundColor(sourceUpdateBackgroundColor);\n    setMongoDatalakeUpdateBackgroundColor(datalakeUpdateBackgroundColor);\n    setMongoSourceDeleteBackgroundColor(sourceDeleteBackgroundColor);\n    setMongoDatalakeDeleteBackgroundColor(datalakeDeleteBackgroundColor);\n    setMongoDate(date);\n    setStartDate(date[0]);\n  };\n\n  useEffect(() => {\n    if (chart.sqoopChart !== null && chart.sqoopChart.data !== undefined && chart.sqoopChart.data.datasets[0] !== undefined) {\n      chart.sqoopChart.data.datasets[0].data = sqoopSourceData;\n      chart.sqoopChart.data.datasets[0].backgroundColor = sqoopSourceDataColor; // chart.sqoopChart.data.datasets\n\n      chart.sqoopChart.data.datasets[1].data = sqoopDatalakeData;\n      chart.sqoopChart.data.datasets[1].backgroundColor = sqoopDatalakeDataColor;\n      chart.sqoopChart.data.labels = sqoopCountDate;\n      chart.sqoopChart.update();\n    }\n  }, [sqoopSourceData, sqoopDatalakeData, sqoopCountDate, sqoopSourceDataColor, sqoopDatalakeDataColor]);\n  useEffect(() => {\n    if (chart.maxwellChartOne !== null) {\n      if (maxwellSourceInsert !== null && maxwellSourceInsert.length !== 0) {\n        maxwellChartOneDataset.push({\n          label: \"Source Insert\",\n          backgroundColor: maxwellSourceInsertHovColor,\n          borderWidth: 1,\n          data: maxwellSourceInsert,\n          categoryPercentage: 0.9\n        }, {\n          label: \"Datalake Insert\",\n          backgroundColor: maxwellDatalakeInsertHovColor,\n          borderWidth: 1,\n          data: maxwellDatalakeInsert,\n          categoryPercentage: 0.9\n        });\n      }\n\n      if (maxwellSourceUpdate !== null && maxwellSourceUpdate.length !== 0) {\n        maxwellChartOneDataset.push({\n          label: \"Source update\",\n          backgroundColor: maxwellSourceUpdateHovColor,\n          borderWidth: 1,\n          data: maxwellSourceUpdate,\n          categoryPercentage: 0.9\n        }, {\n          label: \"Datalake update\",\n          backgroundColor: maxwellDatalakeUpdateHovColor,\n          borderWidth: 1,\n          data: maxwellDatalakeUpdate,\n          categoryPercentage: 0.9\n        });\n      }\n\n      if (maxwellSourceDelete !== null && maxwellSourceDelete.length !== 0) {\n        maxwellChartOneDataset.push({\n          label: \"Source delete\",\n          backgroundColor: maxwellSourceDeleteHovColor,\n          borderWidth: 1,\n          data: maxwellSourceDelete,\n          categoryPercentage: 0.9\n        }, {\n          label: \"Datalake delete\",\n          backgroundColor: maxwellDatalakeDeleteHovColor,\n          borderWidth: 1,\n          data: maxwellDatalakeDelete,\n          categoryPercentage: 0.9\n        });\n      }\n\n      chart.maxwellChartOne.data.datasets = maxwellChartOneDataset;\n      chart.maxwellChartOne.data.labels = maxwellDate;\n      chart.maxwellChartOne.update();\n    }\n  }, [maxwellSourceInsert, thresholdBreached, UpdatePresent, InsertPresent, DeletePresent, maxwellDatalakeInsert, maxwellSourceUpdate, maxwellDatalakeUpdate, maxwellSourceDelete, maxwellDatalakeDelete, maxwellDate]); // for updating mongo chart\n\n  useEffect(() => {\n    if (chart.mongoChart !== null) {\n      if (mongoSourceInsert !== null && mongoSourceInsert.length !== 0) {\n        mongoDataset.push({\n          label: \"Source Insert\",\n          backgroundColor: mongoSourceInsertBackgroundColor,\n          borderWidth: 1,\n          data: mongoSourceInsert,\n          categoryPercentage: 0.9\n        }, {\n          label: \"Datalake Insert\",\n          backgroundColor: mongoDatalakeInsertBackgroundColor,\n          borderWidth: 1,\n          data: mongoDatalakeInsert,\n          categoryPercentage: 0.9\n        });\n      }\n\n      if (mongoSourceUpdate !== null && mongoSourceUpdate.length !== 0) {\n        mongoDataset.push({\n          label: \"Source update\",\n          backgroundColor: mongoSourceUpdateBackgroundColor,\n          borderWidth: 1,\n          data: mongoSourceUpdate,\n          categoryPercentage: 0.9\n        }, {\n          label: \"Datalake update\",\n          backgroundColor: mongoDatalakeUpdateBackgroundColor,\n          borderWidth: 1,\n          data: mongoDatalakeUpdate,\n          categoryPercentage: 0.9\n        });\n      }\n\n      if (mongoSourceDelete !== null && mongoSourceDelete.length !== 0) {\n        mongoDataset.push({\n          label: \"Source delete\",\n          backgroundColor: mongoSourceDeleteBackgroundColor,\n          borderWidth: 1,\n          data: mongoSourceDelete,\n          categoryPercentage: 0.9\n        }, {\n          label: \"Datalake delete\",\n          backgroundColor: mongoDatalakeDeleteBackgroundColor,\n          borderWidth: 1,\n          data: mongoDatalakeDelete,\n          categoryPercentage: 0.9\n        });\n      }\n\n      if (mongoSourceReplace !== null && mongoSourceReplace.length !== 0) {\n        mongoDataset.push({\n          label: \"Source replace\",\n          backgroundColor: mongoSourceReplaceBackgroundColor,\n          borderWidth: 1,\n          data: mongoSourceReplace,\n          categoryPercentage: 0.9\n        }, {\n          label: \"Datalake replace\",\n          backgroundColor: mongoDatalakeReplaceBackgroundColor,\n          borderWidth: 1,\n          data: mongoDatalakeReplace,\n          categoryPercentage: 0.9\n        });\n      }\n\n      chart.mongoChart.data.datasets = mongoDataset;\n      chart.mongoChart.data.labels = mongoDate;\n      chart.mongoChart.update();\n    }\n  }, [mongoSourceInsert, mongoThresholdBreached, mongoUpdatePresent, mongoInsertPresent, mongoDeletePresent, mongoDatalakeInsert, mongoSourceUpdate, mongoDatalakeUpdate, mongoSourceDelete, mongoDatalakeDelete, mongoDate]);\n  useEffect(() => {\n    var _events$ingestionStra3;\n\n    let chartStatus1 = Chart.getChart(\"myChart-stack\");\n\n    if (((_events$ingestionStra3 = events['ingestionStrategy']) === null || _events$ingestionStra3 === void 0 ? void 0 : _events$ingestionStra3.toLowerCase()) == 'sqoop') {\n      if (chartStatus1 == undefined) {\n        createChart();\n        getsqoopValue();\n      } else {\n        getsqoopValue();\n      }\n    }\n  }, [events, sqoopCount, sqoopThresholdBreached]);\n  useEffect(() => {\n    var _events$ingestionStra4;\n\n    let chartStatusTwo = Chart.getChart(\"myChart-maxwell-one\");\n\n    if (((_events$ingestionStra4 = events['ingestionStrategy']) === null || _events$ingestionStra4 === void 0 ? void 0 : _events$ingestionStra4.toLowerCase()) == 'maxwell') {\n      if (chartStatusTwo === undefined) {\n        createMaxwellChartOne();\n        getMaxwellValue();\n      } else {\n        getMaxwellValue();\n      }\n    }\n  }, [events, maxwellCount]);\n  useEffect(() => {\n    var _events$sourceType2;\n\n    let chartStatusThree = Chart.getChart(\"myChart-mongo\");\n\n    if (((_events$sourceType2 = events.sourceType) === null || _events$sourceType2 === void 0 ? void 0 : _events$sourceType2.toLowerCase()) === 'mongo') {\n      if (chartStatusThree == undefined) {\n        createMongoChart();\n        getMongoValue();\n      } else {\n        getMongoValue();\n      }\n    }\n  }, [events, mongoCount]);\n\n  const handleupdatingMaxwellData = (value, showStatus, thresholdList) => {\n    let sourceInsertingData = {\n      label: \"Source Insert\",\n      backgroundColor: maxwellSourceInsertHovColor,\n      borderWidth: 1,\n      data: maxwellSourceInsert,\n      categoryPercentage: 0.9\n    };\n    let datalakeInsertingData = {\n      label: \"Datalake Insert\",\n      backgroundColor: maxwellDatalakeInsertHovColor,\n      borderWidth: 1,\n      data: maxwellDatalakeInsert,\n      categoryPercentage: 0.9\n    };\n    let sourceUpdatingData = {\n      label: \"Source update\",\n      backgroundColor: maxwellSourceUpdateHovColor,\n      borderWidth: 1,\n      data: maxwellSourceUpdate,\n      categoryPercentage: 0.9\n    };\n    let datalakeUpdatingData = {\n      label: \"Datalake update\",\n      backgroundColor: maxwellDatalakeUpdateHovColor,\n      borderWidth: 1,\n      data: maxwellDatalakeUpdate,\n      categoryPercentage: 0.9\n    };\n    let sourceDeleteData = {\n      label: \"Source delete\",\n      backgroundColor: maxwellSourceDeleteHovColor,\n      borderWidth: 1,\n      data: maxwellSourceDelete,\n      categoryPercentage: 0.9\n    };\n    let datalakeDeleteData = {\n      label: \"Datalake delete\",\n      backgroundColor: maxwellDatalakeDeleteHovColor,\n      borderWidth: 1,\n      data: maxwellDatalakeDelete,\n      categoryPercentage: 0.9\n    };\n\n    if (chart.maxwellChartOne !== null) {\n      let newmaxwekkChart = [];\n\n      if (maxwellSourceInsert !== null && maxwellSourceInsert.length !== 0) {\n        if (value == 'insert' && showStatus == true) {\n          // if (addCenterLine.datalakeInsert == false) {\n          newmaxwekkChart.push(sourceInsertingData, datalakeInsertingData);\n\n          if (checking.update == true) {\n            newmaxwekkChart.push(sourceUpdatingData, datalakeUpdatingData);\n          }\n\n          if (checking.delete == true) {\n            newmaxwekkChart.push(sourceDeleteData, datalakeDeleteData);\n          }\n        } else if (value == 'insert' && showStatus == false) {\n          if (checking.update == true) {\n            newmaxwekkChart.push(sourceUpdatingData, datalakeUpdatingData);\n          }\n\n          if (checking.delete == true) {\n            newmaxwekkChart.push(sourceDeleteData, datalakeDeleteData);\n          }\n\n          if (checking.delete == false && checking.update == false) {\n            newmaxwekkChart.push(sourceInsertingData, datalakeInsertingData);\n\n            if (maxwellSourceUpdate !== null && maxwellSourceUpdate.length !== 0) {\n              newmaxwekkChart.push(sourceUpdatingData, datalakeUpdatingData);\n            }\n\n            if (maxwellSourceDelete !== null && maxwellSourceDelete.length !== 0) {\n              newmaxwekkChart.push(sourceDeleteData, datalakeDeleteData);\n            }\n          }\n        }\n      }\n\n      if (maxwellSourceUpdate !== null && maxwellSourceUpdate.length !== 0) {\n        if (value == 'update' && showStatus == true) {\n          if (checking.insert == true) {\n            newmaxwekkChart.push(sourceInsertingData, datalakeInsertingData);\n          }\n\n          newmaxwekkChart.push(sourceUpdatingData, datalakeUpdatingData);\n\n          if (checking.delete == true) {\n            newmaxwekkChart.push(sourceDeleteData, datalakeDeleteData);\n          }\n        } else if (value == 'update' && showStatus == false) {\n          if (checking.insert == true) {\n            newmaxwekkChart.push(sourceInsertingData, datalakeInsertingData);\n          }\n\n          if (checking.delete == true) {\n            newmaxwekkChart.push(sourceDeleteData, datalakeDeleteData);\n          }\n\n          if (checking.insert == false && checking.delete == false) {\n            if (maxwellSourceInsert !== null && maxwellSourceInsert.length !== 0) {\n              newmaxwekkChart.push(sourceInsertingData, datalakeInsertingData);\n            }\n\n            newmaxwekkChart.push(sourceUpdatingData, datalakeUpdatingData);\n\n            if (maxwellSourceDelete !== null && maxwellSourceDelete.length !== 0) {\n              newmaxwekkChart.push(sourceDeleteData, datalakeDeleteData);\n            }\n          }\n        }\n      }\n\n      if (maxwellSourceDelete !== null && maxwellSourceDelete.length !== 0) {\n        if (value == 'delete' && showStatus == true) {\n          // if (addCenterLine.datalakeDelete == false) {\n          if (checking.insert == true) {\n            newmaxwekkChart.push(sourceInsertingData, datalakeInsertingData);\n          }\n\n          if (checking.update == true) {\n            newmaxwekkChart.push(sourceUpdatingData, datalakeUpdatingData);\n          }\n\n          newmaxwekkChart.push(sourceDeleteData, datalakeDeleteData); // }\n        } else if (value == 'delete' && showStatus == false) {\n          if (checking.insert == true) {\n            newmaxwekkChart.push(sourceInsertingData, datalakeInsertingData);\n          }\n\n          if (checking.update == true) {\n            newmaxwekkChart.push(sourceUpdatingData, datalakeUpdatingData);\n          }\n\n          if (checking.insert == false && checking.update == false) {\n            if (maxwellSourceInsert !== null && maxwellSourceInsert.length !== 0) {\n              newmaxwekkChart.push(sourceInsertingData, datalakeInsertingData);\n            }\n\n            if (maxwellSourceUpdate !== null && maxwellSourceUpdate.length !== 0) {\n              newmaxwekkChart.push(sourceUpdatingData, datalakeUpdatingData);\n            }\n\n            newmaxwekkChart.push(sourceDeleteData, datalakeDeleteData);\n          }\n        }\n      }\n\n      chart.maxwellChartOne.data.datasets = newmaxwekkChart;\n      chart.maxwellChartOne.data.labels = maxwellDate;\n      chart.maxwellChartOne.update();\n    } // }\n\n  }; // mongo db start handle legend button\n  // if (chart.mongoChart !== null) {\n  // }\n  // handleMongothreshold\n\n\n  const handleupdatingMongoData = (value, showStatus, thresholdList) => {\n    let sourceInsertingData = {\n      label: \"Source Insert\",\n      backgroundColor: mongoSourceInsertBackgroundColor,\n      borderWidth: 1,\n      data: mongoSourceInsert,\n      categoryPercentage: 0.9\n    };\n    let datalakeInsertingData = {\n      label: \"Datalake Insert\",\n      backgroundColor: mongoDatalakeInsertBackgroundColor,\n      borderWidth: 1,\n      data: mongoDatalakeInsert,\n      categoryPercentage: 0.9\n    };\n    let sourceUpdatingData = {\n      label: \"Source update\",\n      backgroundColor: mongoSourceUpdateBackgroundColor,\n      borderWidth: 1,\n      data: mongoSourceUpdate,\n      categoryPercentage: 0.9\n    };\n    let datalakeUpdatingData = {\n      label: \"Datalake update\",\n      backgroundColor: mongoDatalakeUpdateBackgroundColor,\n      borderWidth: 1,\n      data: mongoDatalakeUpdate,\n      categoryPercentage: 0.9\n    };\n    let sourceDeleteData = {\n      label: \"Source delete\",\n      backgroundColor: mongoSourceDeleteBackgroundColor,\n      borderWidth: 1,\n      data: mongoSourceDelete,\n      categoryPercentage: 0.9\n    };\n    let datalakeDeleteData = {\n      label: \"Datalake delete\",\n      backgroundColor: mongoDatalakeDeleteBackgroundColor,\n      borderWidth: 1,\n      data: mongoDatalakeDelete,\n      categoryPercentage: 0.9\n    }; // let sourceReplaceData = {\n    //   label: \"Source replace\",\n    //   backgroundColor: mongoSourceReplaceBackgroundColor,\n    //   borderWidth: 1,\n    //   data: mongoSourceReplace,\n    //   categoryPercentage: 0.9,\n    // }\n    // let datalakeReplaceData = {\n    //   label: \"Datalake replace\",\n    //   backgroundColor: mongoDatalakeReplaceBackgroundColor,\n    //   borderWidth: 1,\n    //   data: mongoDatalakeReplace,\n    //   categoryPercentage: 0.9,\n    // }\n\n    if (chart.mongoChart !== null) {\n      let newMongoChart = [];\n\n      if (mongoSourceInsert !== null && mongoSourceInsert.length !== 0) {\n        if (value == 'insert' && showStatus == true) {\n          newMongoChart.push(sourceInsertingData, datalakeInsertingData);\n\n          if (checking.update == true) {\n            newMongoChart.push(sourceUpdatingData, datalakeUpdatingData);\n          }\n\n          if (checking.delete == true) {\n            newMongoChart.push(sourceDeleteData, datalakeDeleteData);\n          }\n        } else if (value == 'insert' && showStatus == false) {\n          if (checking.update == true) {\n            newMongoChart.push(sourceUpdatingData, datalakeUpdatingData);\n          }\n\n          if (checking.delete == true) {\n            newMongoChart.push(sourceDeleteData, datalakeDeleteData);\n          }\n\n          if (checking.delete == false && checking.update == false) {\n            newMongoChart.push(sourceInsertingData, datalakeInsertingData);\n\n            if (maxwellSourceUpdate !== null && maxwellSourceUpdate.length !== 0) {\n              newMongoChart.push(sourceUpdatingData, datalakeUpdatingData);\n            }\n\n            if (maxwellSourceDelete !== null && maxwellSourceDelete.length !== 0) {\n              newMongoChart.push(sourceDeleteData, datalakeDeleteData);\n            }\n          }\n        }\n      }\n\n      if (mongoSourceUpdate !== null && mongoSourceUpdate.length !== 0) {\n        if (value == 'update' && showStatus == true) {\n          if (checking.insert == true) {\n            newMongoChart.push(sourceInsertingData, datalakeInsertingData);\n          }\n\n          newMongoChart.push(sourceUpdatingData, datalakeUpdatingData);\n\n          if (checking.delete == true) {\n            newMongoChart.push(sourceDeleteData, datalakeDeleteData);\n          }\n        } else if (value == 'update' && showStatus == false) {\n          if (checking.insert == true) {\n            newMongoChart.push(sourceInsertingData, datalakeInsertingData);\n          }\n\n          if (checking.delete == true) {\n            newMongoChart.push(sourceDeleteData, datalakeDeleteData);\n          }\n\n          if (checking.insert == false && checking.delete == false) {\n            if (maxwellSourceInsert !== null && maxwellSourceInsert.length !== 0) {\n              newMongoChart.push(sourceInsertingData, datalakeInsertingData);\n            }\n\n            newMongoChart.push(sourceUpdatingData, datalakeUpdatingData);\n\n            if (maxwellSourceDelete !== null && maxwellSourceDelete.length !== 0) {\n              newMongoChart.push(sourceDeleteData, datalakeDeleteData);\n            }\n          }\n        }\n      }\n\n      if (mongoSourceDelete !== null && mongoSourceDelete.length !== 0) {\n        if (value == 'delete' && showStatus == true) {\n          if (checking.insert == true) {\n            newMongoChart.push(sourceInsertingData, datalakeInsertingData);\n          }\n\n          if (checking.update == true) {\n            newMongoChart.push(sourceUpdatingData, datalakeUpdatingData);\n          }\n\n          newMongoChart.push(sourceDeleteData, datalakeDeleteData);\n        } else if (value == 'delete' && showStatus == false) {\n          if (checking.insert == true) {\n            newMongoChart.push(sourceInsertingData, datalakeInsertingData);\n          }\n\n          if (checking.update == true) {\n            newMongoChart.push(sourceUpdatingData, datalakeUpdatingData);\n          }\n\n          if (checking.insert == false && checking.update == false) {\n            if (maxwellSourceInsert !== null && maxwellSourceInsert.length !== 0) {\n              newMongoChart.push(sourceInsertingData, datalakeInsertingData);\n            }\n\n            if (maxwellSourceUpdate !== null && maxwellSourceUpdate.length !== 0) {\n              newMongoChart.push(sourceUpdatingData, datalakeUpdatingData);\n            } // if (maxwellSourceDelete !== null && maxwellSourceDelete.length !== 0) {\n\n\n            newMongoChart.push(sourceDeleteData, datalakeDeleteData); // }\n          }\n        }\n      }\n\n      chart.mongoChart.data.datasets = newMongoChart;\n      chart.mongoChart.data.labels = mongoDate;\n      chart.mongoChart.update();\n    }\n  }; // mongo db end handle legend button\n  // const date = new Date\n\n\n  const createChart = () => {\n    const ctxOne = document.getElementById('myChart-stack').getContext('2d');\n    chart.sqoopChart = new Chart(ctxOne, {\n      type: 'bar',\n      data: {\n        labels: '',\n        datasets: [{\n          label: \"Source count\",\n          backgroundColor: 'rgba(0, 0, 255, 0.5)',\n          borderWidth: 0.8,\n          data: null,\n          barPercentage: .9\n        }, {\n          label: \"Datalake count\",\n          backgroundColor: 'rgba(0, 0, 0, 0.2)',\n          borderWidth: 0.8,\n          data: null,\n          barPercentage: .9\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: false\n          },\n          title: {}\n        },\n        scales: {\n          xAxes: [{\n            display: true,\n            stacked: true,\n            gridLines: {\n              offsetGridLines: true\n            },\n            ticks: {\n              min: 0\n            }\n          }],\n          yAxes: [{\n            display: true,\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    });\n  };\n\n  const createMongoChart = () => {\n    const ctxThree = document.getElementById('myChart-mongo').getContext('2d');\n    chart.mongoChart = new Chart(ctxThree, {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: mongoDataset\n      },\n      // plugins:[ChartDataLabels],\n      options: {\n        plugins: {\n          legend: {\n            display: false\n          },\n          // datalabels:{\n          //   // anchor: 'end',\n          //   align:'top',\n          //   rotation:90,\n          // },\n          display: 'auto'\n        },\n        scales: {\n          x: {\n            stacked: false\n          }\n        }\n      }\n    });\n  };\n\n  const handleCallingProcessedApi = () => {\n    let newChecking = checking;\n\n    if (chart.sqoopChart !== null) {\n      if (validDate == true) {\n        dispatch(getSqoopDataWithTimeWindow(selectedTenant, selectedEvent, startDate, timeWindow));\n      }\n    }\n\n    if (chart.maxwellChartOne !== null) {\n      if (validDate == true) {\n        dispatch(getMaxwellDataWithTimwWindow(selectedTenant, selectedEvent, startDate, timeWindow));\n      }\n    }\n\n    if (chart.mongoChart !== null) {\n      if (validDate == true) {\n        dispatch(getMongoDataWithTimeWindow(selectedTenant, selectedEvent, startDate, timeWindow));\n      }\n    }\n\n    newChecking.insert = false;\n    newChecking.update = false;\n    newChecking.delete = false;\n    setChecking({ ...newChecking\n    });\n  };\n\n  const handleStartDate = e => {\n    let maxDate = handleDate().split('-');\n    let maxDay = parseInt(maxDate[2]);\n    let maxMonth = parseInt(maxDate[1]);\n    let maxYear = parseInt(maxDate[0]);\n    let date = e.target.value.split('-');\n    let day = parseInt(date[2]);\n    let month = parseInt(date[1]);\n    let year = parseInt(date[0]);\n    let flag = false;\n\n    if (year > 2021 && year <= maxYear) {\n      if (month <= maxMonth) {\n        setStartDate(e.target.value);\n        setValidDate(true);\n        flag = false;\n      } else {\n        flag = true;\n      }\n    } else {\n      flag = true;\n    }\n\n    if (flag == true) {\n      setValidDate(false);\n    }\n  };\n\n  const handleTimeWindow = e => {\n    if (e.target.value < 31) {\n      setTimeWindow(e.target.value);\n    }\n  };\n\n  const handleUpdatingSqoopData = (value, showStatus) => {\n    let sourceCount = {\n      label: \"Source count\",\n      backgroundColor: sqoopSourceDataColor,\n      borderWidth: 0.8,\n      data: sqoopSourceData,\n      barPercentage: .9\n    };\n    let datalakeCount = {\n      label: \"Datalake count\",\n      backgroundColor: sqoopDatalakeDataColor,\n      borderWidth: 0.8,\n      data: sqoopDatalakeData,\n      barPercentage: .9\n    };\n    let newSqoopData = [];\n\n    if (value == 'count' && showStatus == true) {\n      newSqoopData.push(sourceCount, datalakeCount);\n    }\n\n    chart.sqoopChart.data.datasets = newSqoopData;\n    chart.sqoopChart.data.labels = sqoopCountDate;\n    chart.sqoopChart.update();\n  };\n\n  const handleDataShowing = value => {\n    let newChecking = checking;\n\n    if (value == 'insert') {\n      if (checking.insert == false) {\n        newChecking.insert = true;\n\n        if (chart.maxwellChartOne !== null) {\n          handleupdatingMaxwellData('insert', true);\n        }\n\n        if (chart.mongoChart !== null) {\n          handleupdatingMongoData('insert', true);\n        }\n      } else {\n        newChecking.insert = false;\n\n        if (chart.maxwellChartOne !== null) {\n          handleupdatingMaxwellData('insert', false);\n        }\n\n        if (chart.mongoChart !== null) {\n          handleupdatingMongoData('insert', false);\n        }\n      }\n    } else if (value == 'update') {\n      if (checking.update == false) {\n        newChecking.update = true;\n\n        if (chart.maxwellChartOne !== null) {\n          handleupdatingMaxwellData('update', true);\n        }\n\n        if (chart.mongoChart !== null) {\n          handleupdatingMongoData('update', true);\n        }\n      } else {\n        newChecking.update = false;\n\n        if (chart.maxwellChartOne !== null) {\n          handleupdatingMaxwellData('update', false);\n        }\n\n        if (chart.mongoChart !== null) {\n          handleupdatingMongoData('update', false);\n        }\n      }\n    } else if (value == 'delete') {\n      if (checking.delete == false) {\n        newChecking.delete = true;\n\n        if (chart.maxwellChartOne !== null) {\n          handleupdatingMaxwellData('delete', true);\n        }\n\n        if (chart.mongoChart !== null) {\n          handleupdatingMongoData('delete', true);\n        }\n      } else {\n        newChecking.delete = false;\n\n        if (chart.maxwellChartOne !== null) {\n          handleupdatingMaxwellData('delete', false);\n        }\n\n        if (chart.mongoChart !== null) {\n          handleupdatingMongoData('delete', false);\n        }\n      }\n    } else if (value == 'count') {\n      if (checking.count == false) {\n        newChecking.count = true;\n\n        if (chart.sqoopChart !== null) {\n          handleUpdatingSqoopData('count', true);\n        }\n      } else {\n        newChecking.count = false;\n\n        if (chart.sqoopChart !== null) {\n          handleUpdatingSqoopData('count', false);\n        }\n      }\n    }\n\n    setChecking({ ...newChecking\n    });\n  };\n\n  const handleDate = () => {\n    let date = new Date().toLocaleDateString().split('/');\n    let day = date[0];\n    let month = date[1];\n    let year = date[2];\n\n    if (day.length == 1) {\n      day = `0${day}`;\n    }\n\n    if (month.length == 1) {\n      month = `0${month}`;\n    }\n\n    let newModifiedDate = year + '-' + month + '-' + day;\n    return newModifiedDate;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"right-stacked\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"start-date\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Starting date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1532,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2022-01-01\",\n          onChange: handleStartDate,\n          defaultValue: startDate,\n          value: startDate,\n          max: handleDate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1535,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1531,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-window\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Time Window in days\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1547,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: 1,\n          onChange: handleTimeWindow,\n          defaultValue: 7,\n          value: timeWindow,\n          max: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1550,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1546,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCallingProcessedApi,\n        children: \"Go\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1561,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1529,\n      columnNumber: 7\n    }, this), ((_events$ingestionStra5 = events.ingestionStrategy) === null || _events$ingestionStra5 === void 0 ? void 0 : _events$ingestionStra5.toLowerCase()) === 'maxwell' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"customLegend-one\",\n        children: [InsertPresent && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            onClick: () => handleDataShowing('insert'),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"CheckInsert\",\n              checked: checking.insert == true ? 'checked' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1574,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source/ Datalake Insert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1578,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1571,\n            columnNumber: 13\n          }, this)\n        }, void 0, false), UpdatePresent && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            onClick: () => handleDataShowing('update'),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"CheckUpdate\",\n              checked: checking.update == true ? 'checked' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1588,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source/ Datalake Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1593,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1585,\n            columnNumber: 13\n          }, this)\n        }, void 0, false), DeletePresent && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            onClick: () => handleDataShowing('delete'),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"CheckDelete\",\n              checked: checking.delete == true ? 'checked' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1603,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Souce/ Datalake Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1606,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1600,\n            columnNumber: 13\n          }, this)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1569,\n        columnNumber: 9\n      }, this), ((_events$ingestionStra6 = events.ingestionStrategy) === null || _events$ingestionStra6 === void 0 ? void 0 : _events$ingestionStra6.toLowerCase()) === 'maxwell' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"myChart-maxwell-one\",\n          width: \"3\",\n          height: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1618,\n          columnNumber: 13\n        }, this)\n      }, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"customLegend\",\n        children: [InsertPresent && maxwellThresholdBreachedCount === false && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgba(70, 69, 69, 0.2)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1624,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source Insert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1625,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1623,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgba(0, 0, 0, 0.2)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1630,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Datalake Insert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1632,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1629,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true), UpdatePresent && maxwellThresholdBreachedCount === false && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgb(252, 204, 115)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1639,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1641,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1638,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgb(250, 188, 74)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1646,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Datalake update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1648,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1645,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true), DeletePresent && maxwellThresholdBreachedCount === false && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgba(86, 86, 252, 0.5)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1654,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1656,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1653,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgba(0, 0, 255, 0.5)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1661,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Datalake delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1663,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1660,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true), thresholdBreached && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'red'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1670,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Datalake Threshold Breached\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1672,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1669,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgb(238, 94, 94)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1677,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source Threshold Breached\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1679,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1676,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1621,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true), ((_events$sourceType3 = events.sourceType) === null || _events$sourceType3 === void 0 ? void 0 : _events$sourceType3.toLowerCase()) === 'mongo' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"customLegend-one\",\n        children: [mongoInsertPresent && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            onClick: () => handleDataShowing('insert'),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"CheckInsert\",\n              checked: checking.insert == true ? 'checked' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1698,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source/ Datalake Insert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1702,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1695,\n            columnNumber: 13\n          }, this)\n        }, void 0, false), mongoUpdatePresent && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            onClick: () => handleDataShowing('update'),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"CheckUpdate\",\n              checked: checking.update == true ? 'checked' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1715,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source/ Datalake Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1718,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1712,\n            columnNumber: 13\n          }, this)\n        }, void 0, false), mongoDeletePresent && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            onClick: () => handleDataShowing('delete'),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"CheckDelete\",\n              checked: checking.delete == true ? 'checked' : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1728,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Souce/ Datalake Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1731,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1724,\n            columnNumber: 13\n          }, this)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1693,\n        columnNumber: 9\n      }, this), ((_events$sourceType4 = events.sourceType) === null || _events$sourceType4 === void 0 ? void 0 : _events$sourceType4.toLowerCase()) === 'mongo' && /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"myChart-mongo\",\n        width: \"3\",\n        height: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1741,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"customLegend\",\n        children: [mongoInsertPresent && mongoThresholdBreachedCount === false && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgba(70, 69, 69, 0.2)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1745,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source Insert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1747,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1744,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgba(0, 0, 0, 0.2)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1752,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Datalake Insert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1754,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1751,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true), mongoUpdatePresent && mongoThresholdBreachedCount === false && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgb(252, 204, 115)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1763,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1765,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1762,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgb(250, 188, 74)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1770,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Datalake update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1772,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1769,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true), mongoDeletePresent && mongoThresholdBreachedCount === false && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgba(86, 86, 252, 0.5)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1778,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1780,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1777,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgba(0, 0, 255, 0.5)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1785,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Datalake delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1787,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1784,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true), mongoThresholdBreached && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'red'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1794,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Datalake Threshold Breached\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1796,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1793,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgb(238, 94, 94)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1801,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source Threshold Breached\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1803,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1800,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1742,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true), ((_events$ingestionStra7 = events.ingestionStrategy) === null || _events$ingestionStra7 === void 0 ? void 0 : _events$ingestionStra7.toLowerCase()) === 'sqoop' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"customLegend-one\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1816,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"myChart-stack\",\n        width: \"3\",\n        height: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1832,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"customLegend\",\n        children: [sqoopThresholdBreachedCount === false && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgba(0, 0, 255, 0.5)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1836,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source count\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1838,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1835,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgba(0, 0, 0, 0.2)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1843,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Datalake count\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1845,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1842,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true), sqoopThresholdBreached && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'rgb(238, 94, 94)'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1852,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Source Threshold Breached\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1854,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1851,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color\",\n              style: {\n                backgroundColor: 'red'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1859,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Datalake Threshold Breached\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1861,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1858,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1833,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1528,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Stacked, \"MBqxlDWrns+nbtaOEvwYHGngucg=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Stacked;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stacked\");","map":{"version":3,"names":["React","useEffect","useState","useSelector","useDispatch","getSqoopData","getSqoopDataWithTimeWindow","getMaxwellDataWithTimwWindow","getMongoDataWithTimeWindow","Chart","ChartDataLabels","Sqoop","chart","sqoopChart","maxwellChartOne","mongoChart","Stacked","events","state","dataReducer","selectedEventMeta","sqoopCount","maxwellCount","mongoCount","selectedTenant","selectedEvent","startDate","setStartDate","timeWindow","setTimeWindow","validDate","setValidDate","sqoopSourceData","setSqoopSourceData","sqoopDatalakeData","setSqoopDatalakeData","sqoopSourceDataColor","setSqoopSourceDataColor","sqoopDatalakeDataColor","setSqoopDatalakeDataColor","sqoopCountDate","setSqoopCountDate","sqoopThresholdBreached","setSqoopThresholdBreached","sqoopThresholdBreachedCount","setSqoopThresholdBreachedCount","maxwellSourceInsert","setMaxwellSourceInsert","InsertPresent","setInsertPresent","maxwellDatalakeInsert","setMaxwellDatalakeInsert","maxwellSourceUpdate","setMaxwellSourceUpdate","UpdatePresent","setUpdatePresent","maxwellDatalakeUpdate","setMaxwellDatalakeUpdate","maxwellSourceDelete","setMaxwellSourceDelete","DeletePresent","setDeletePresent","maxwellDatalakeDelete","setMaxwellDatalakeDelete","maxwellDate","setMaxwellDate","maxwellSourceInsertHovColor","setMaxwellSourceInsertHovColor","maxwellDatalakeInsertHovColor","setMaxwellDatalakeInsertHovColor","maxwellSourceUpdateHovColor","setMaxwellSourceUpdateHovColor","maxwellDatalakeUpdateHovColor","setMaxwellDatalakeUpdateHovColor","maxwellSourceDeleteHovColor","setMaxwellSourceDeleteHovColor","maxwellDatalakeDeleteHovColor","setMaxwellDatalakeDeleteHovColor","thresholdBreached","setThresholdBreached","maxwellThresholdBreachedCount","setMaxwellThresholdBreachedCount","mongoSourceInsert","setMongoSourceInsert","mongoDatalakeInsert","setMongoDatalakeInsert","mongoInsertPresent","setMongoInsertPresent","mongoSourceUpdate","setMongoSourceUpdate","mongoDatalakeUpdate","setMongoDatalakeUpdate","mongoUpdatePresent","setMongoUpdatePresent","mongoSourceDelete","setMongoSourceDelete","mongoDatalakeDelete","setMongoDatalakeDelete","mongoDeletePresent","setMongoDeletePresent","mongoSourceReplace","setMongoSourceReplace","mongoDatalakeReplace","setMongoDatalakeReplace","mongoReplacePresent","setMongoReplacePresent","mongoDate","setMongoDate","mongoSourceInsertBackgroundColor","setMongoSourceInsertBackgroundColor","mongoDatalakeInsertBackgroundColor","setMongoDatalakeInsertBackgroundColor","mongoSourceUpdateBackgroundColor","setMongoSourceUpdateBackgroundColor","mongoDatalakeUpdateBackgroundColor","setMongoDatalakeUpdateBackgroundColor","mongoSourceDeleteBackgroundColor","setMongoSourceDeleteBackgroundColor","mongoDatalakeDeleteBackgroundColor","setMongoDatalakeDeleteBackgroundColor","mongoSourceReplaceBackgroundColor","setMongoSourceReplaceBackgroundColor","mongoDatalakeReplaceBackgroundColor","setMongoDatalakeReplaceBackgroundColor","mongoThresholdBreached","setMongoThresholdBreached","mongoThresholdBreachedCount","setMongoThresholdBreachedCount","mongoDataset","maxwellDataset","maxwellChartOneDataset","checking","setChecking","dispatch","createMaxwellChartOne","ctxFour","document","getElementById","getContext","type","data","labels","datasets","options","plugins","legend","display","scales","x","stacked","chartStatus","getChart","chartStatus1","chartStatus2","toLowerCase","length","createChart","getsqoopValue","getMaxwellValue","createMongoChart","getMongoValue","requiredLength","source","datalake","date","sourceColor","datalakeColor","thresholdCount","index","push","includes","slice","sourceInsert","datalakeInsert","sourceUpdate","datalakeUpdate","sourceDelete","datalakeDelete","sourceInsertHovColor","datalakeInsertHovColor","sourceUpdateHovColor","datalakeUpdateHovColor","sourceDeleteHovColor","datalakeDeleteHovColor","sourceReplace","datalakeReplace","sourceInsertBackgroundColor","datalakeInsertBackgroundColor","sourceUpdateBackgroundColor","datalakeUpdateBackgroundColor","sourceDeleteBackgroundColor","datalakeDeleteBackgroundColor","sourceReplaceBackgroundColor","datalakeReplaceBackgroundColor","undefined","backgroundColor","update","label","borderWidth","categoryPercentage","chartStatusTwo","chartStatusThree","sourceType","handleupdatingMaxwellData","value","showStatus","thresholdList","sourceInsertingData","datalakeInsertingData","sourceUpdatingData","datalakeUpdatingData","sourceDeleteData","datalakeDeleteData","newmaxwekkChart","delete","insert","handleupdatingMongoData","newMongoChart","ctxOne","barPercentage","title","xAxes","gridLines","offsetGridLines","ticks","min","yAxes","beginAtZero","ctxThree","handleCallingProcessedApi","newChecking","handleStartDate","e","maxDate","handleDate","split","maxDay","parseInt","maxMonth","maxYear","target","day","month","year","flag","handleTimeWindow","handleUpdatingSqoopData","sourceCount","datalakeCount","newSqoopData","handleDataShowing","count","Date","toLocaleDateString","newModifiedDate","ingestionStrategy"],"sources":["/home/tarun/learning/myOwnProject/nodejs-express-mongodb/frontend/location/src/components/dashboard/rightSection/dataCompletnessChart.js"],"sourcesContent":["import React,{useEffect,useState} from 'react'\nimport {useSelector,useDispatch} from 'react-redux'\nimport {getSqoopData,getSqoopDataWithTimeWindow,getMaxwellDataWithTimwWindow,getMongoDataWithTimeWindow} from '../../../actions/dataActions'\n\nimport Chart from 'chart.js/auto'\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\n// import Calendar from 'react-calendar';\nimport './dataCompletnessChart.scss'\nimport Sqoop from './dataCompletnessChart/sqoop';\n// import 'react-calendar/dist/Calendar.css';\n\nconst chart={\n\n  sqoopChart: null,\n  maxwellChartOne: null,\n  mongoChart: null,\n}\n\n\n\n\nexport default function Stacked() {\n  const events=useSelector((state) => state.dataReducer.selectedEventMeta[0])\n  const sqoopCount=useSelector((state) => state.dataReducer.sqoopCount)\n  const maxwellCount=useSelector((state) => state.dataReducer.maxwellCount)\n  const mongoCount=useSelector((state) => state.dataReducer.mongoCount)\n  const selectedTenant=useSelector((state) => state.dataReducer.selectedTenant)\n  const selectedEvent=useSelector((state) => state.dataReducer.selectedEvent)\n\n  const [startDate,setStartDate]=useState()\n  const [timeWindow,setTimeWindow]=useState(7)\n  const [validDate,setValidDate]=useState(true)\n\n  // const processedRecordsCount = sqoopCount[0] ? sqoopCount[0] : 0\n\n  const [sqoopSourceData,setSqoopSourceData]=useState(null)\n  const [sqoopDatalakeData,setSqoopDatalakeData]=useState(null)\n  const [sqoopSourceDataColor,setSqoopSourceDataColor]=useState(null)\n  const [sqoopDatalakeDataColor,setSqoopDatalakeDataColor]=useState(null)\n  const [sqoopCountDate,setSqoopCountDate]=useState(null)\n  const [sqoopThresholdBreached,setSqoopThresholdBreached]=useState(false)\n  const [sqoopThresholdBreachedCount,setSqoopThresholdBreachedCount]=useState(false)\n\n\n\n  const [maxwellSourceInsert,setMaxwellSourceInsert]=useState(null)\n  const [InsertPresent,setInsertPresent]=useState(false)\n  const [maxwellDatalakeInsert,setMaxwellDatalakeInsert]=useState(null)\n  const [maxwellSourceUpdate,setMaxwellSourceUpdate]=useState(null)\n  const [UpdatePresent,setUpdatePresent]=useState(false)\n  const [maxwellDatalakeUpdate,setMaxwellDatalakeUpdate]=useState(null)\n  const [maxwellSourceDelete,setMaxwellSourceDelete]=useState(null)\n  const [DeletePresent,setDeletePresent]=useState(false)\n  const [maxwellDatalakeDelete,setMaxwellDatalakeDelete]=useState(null)\n  const [maxwellDate,setMaxwellDate]=useState(null)\n  const [maxwellSourceInsertHovColor,setMaxwellSourceInsertHovColor]=useState(null)\n  const [maxwellDatalakeInsertHovColor,setMaxwellDatalakeInsertHovColor]=useState(null)\n  const [maxwellSourceUpdateHovColor,setMaxwellSourceUpdateHovColor]=useState(null)\n  const [maxwellDatalakeUpdateHovColor,setMaxwellDatalakeUpdateHovColor]=useState(null)\n  const [maxwellSourceDeleteHovColor,setMaxwellSourceDeleteHovColor]=useState(null)\n  const [maxwellDatalakeDeleteHovColor,setMaxwellDatalakeDeleteHovColor]=useState(null)\n  const [thresholdBreached,setThresholdBreached]=useState(false)\n  const [maxwellThresholdBreachedCount,setMaxwellThresholdBreachedCount]=useState(false)\n\n\n\n  const [mongoSourceInsert,setMongoSourceInsert]=useState(null)\n  const [mongoDatalakeInsert,setMongoDatalakeInsert]=useState(null)\n  const [mongoInsertPresent,setMongoInsertPresent]=useState(false)\n  const [mongoSourceUpdate,setMongoSourceUpdate]=useState(null)\n  const [mongoDatalakeUpdate,setMongoDatalakeUpdate]=useState(null)\n  const [mongoUpdatePresent,setMongoUpdatePresent]=useState(false)\n  const [mongoSourceDelete,setMongoSourceDelete]=useState(null)\n  const [mongoDatalakeDelete,setMongoDatalakeDelete]=useState(null)\n  const [mongoDeletePresent,setMongoDeletePresent]=useState(false)\n  const [mongoSourceReplace,setMongoSourceReplace]=useState(null)\n  const [mongoDatalakeReplace,setMongoDatalakeReplace]=useState(null)\n  const [mongoReplacePresent,setMongoReplacePresent]=useState(false)\n\n  const [mongoDate,setMongoDate]=useState(null)\n\n  const [mongoSourceInsertBackgroundColor,setMongoSourceInsertBackgroundColor]=useState(null)\n  const [mongoDatalakeInsertBackgroundColor,setMongoDatalakeInsertBackgroundColor]=useState(null)\n  const [mongoSourceUpdateBackgroundColor,setMongoSourceUpdateBackgroundColor]=useState(null)\n  const [mongoDatalakeUpdateBackgroundColor,setMongoDatalakeUpdateBackgroundColor]=useState(null)\n  const [mongoSourceDeleteBackgroundColor,setMongoSourceDeleteBackgroundColor]=useState(null)\n  const [mongoDatalakeDeleteBackgroundColor,setMongoDatalakeDeleteBackgroundColor]=useState(null)\n  const [mongoSourceReplaceBackgroundColor,setMongoSourceReplaceBackgroundColor]=useState(null)\n  const [mongoDatalakeReplaceBackgroundColor,setMongoDatalakeReplaceBackgroundColor]=useState(null)\n\n  const [mongoThresholdBreached,setMongoThresholdBreached]=useState(false)\n  const [mongoThresholdBreachedCount,setMongoThresholdBreachedCount]=useState(false)\n\n\n  const mongoDataset=[]\n  const maxwellDataset=[]\n  let maxwellChartOneDataset=[]\n\n  const [checking,setChecking]=useState({\n    'insert': false,\n    'update': false,\n    'delete': false,\n    'count': false,\n  })\n\n\n  const dispatch=useDispatch()\n\n  const createMaxwellChartOne=() => {\n\n    const ctxFour=document.getElementById('myChart-maxwell-one').getContext('2d')\n    chart.maxwellChartOne=new Chart(ctxFour,{\n      type: 'bar',\n\n\n      data: {\n        labels: [1],\n        datasets: maxwellChartOneDataset,\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: false,\n          }\n        },\n        scales: {\n          x: {\n            stacked: false\n          },\n        }\n      }\n\n    }\n    )\n\n\n  }\n\n  useEffect(() => {\n    let chartStatus=Chart.getChart(\"myChart-stack\");\n    let chartStatus1=Chart.getChart(\"myChart-maxwell\");\n\n    let chartStatus2=Chart.getChart(\"myChart-mongo\");\n\n\n    if(events['ingestionStrategy']?.toLowerCase()=='sqoop'&&sqoopCount.length!==0) {\n      createChart()\n      getsqoopValue()\n\n\n    } else if(events['ingestionStrategy']?.toLowerCase()=='maxwell'&&maxwellCount.length!==0) {\n\n      // createMaxwellChart()\n      createMaxwellChartOne()\n      getMaxwellValue()\n\n    } else if(events['sourceType']?.toLowerCase()=='mongo'&&mongoCount) {\n      createMongoChart()\n      getMongoValue()\n    }\n\n  },[])\n  const getsqoopValue=() => {\n    let requiredLength=sqoopCount.length<=7? sqoopCount.length:7\n    let source=[]\n    let datalake=[]\n    let date=[]\n    let sourceColor=[]\n    let datalakeColor=[]\n    let thresholdCount=0\n\n    for(let index=0; index<requiredLength; index++) {\n\n      source.push(sqoopCount[index]['count'])\n      datalake.push(sqoopCount[index]['datalakeCount'])\n      if(sqoopCount[index]['isValidated']===\"SUCCESS\") {\n        sourceColor.push('rgba(0, 0, 255, 0.5)')\n        datalakeColor.push('rgba(0, 0, 0, 0.2)')\n\n      } else {\n        thresholdCount+=1\n        setSqoopThresholdBreached(true)\n        sourceColor.push('rgb(238, 94, 94)')\n        datalakeColor.push('red')\n      }\n      if(!date.includes(sqoopCount[index]['updatedOn'].slice(0,10))) {\n\n        date.push(sqoopCount[index]['updatedOn'].slice(0,10))\n      }\n    };\n\n    if(thresholdCount===requiredLength) {\n      setSqoopThresholdBreachedCount(true)\n    }\n\n\n    setSqoopSourceData(source)\n    setSqoopDatalakeData(datalake)\n    setSqoopSourceDataColor(sourceColor)\n    setSqoopDatalakeDataColor(datalakeColor)\n\n    setSqoopCountDate(date)\n    setStartDate(date[0])\n  }\n  const getMaxwellValue=() => {\n\n    let requiredLength=maxwellCount.length\n\n    let sourceInsert=[]\n    let datalakeInsert=[]\n    let sourceUpdate=[]\n    let datalakeUpdate=[]\n    let sourceDelete=[]\n    let datalakeDelete=[]\n    let date=[]\n\n\n    let sourceInsertHovColor=[]\n    let datalakeInsertHovColor=[]\n    let sourceUpdateHovColor=[]\n    let datalakeUpdateHovColor=[]\n    let sourceDeleteHovColor=[]\n    let datalakeDeleteHovColor=[]\n    let thresholdCount=0\n    for(let index=0; index<requiredLength; index++) {\n      if(maxwellCount[index]['queryType']==='insert') {\n        setInsertPresent(true)\n\n        sourceInsert.push(maxwellCount[index]['count'])\n        datalakeInsert.push(maxwellCount[index]['datalakeCount'])\n        if(maxwellCount[index]['isValidated']==='SUCCESS') {\n          sourceInsertHovColor.push('rgba(70, 69, 69, 0.2)')\n          datalakeInsertHovColor.push('rgba(0, 0, 0, 0.2)')\n\n        } else {\n          sourceInsertHovColor.push('rgb(238, 94, 94)')\n          datalakeInsertHovColor.push('red')\n\n\n        }\n      }\n      if(maxwellCount[index]['queryType']==='update') {\n        setUpdatePresent(true)\n\n        sourceUpdate.push(maxwellCount[index]['count'])\n        datalakeUpdate.push(maxwellCount[index]['datalakeCount'])\n\n        if(maxwellCount[index]['isValidated']==='SUCCESS') {\n          sourceUpdateHovColor.push('rgb(252, 204, 115)')\n          datalakeUpdateHovColor.push('rgb(250, 188, 74)')\n\n        } else {\n          sourceUpdateHovColor.push('rgb(238, 94, 94)')\n          datalakeUpdateHovColor.push('red')\n        }\n      }\n      if(maxwellCount[index]['queryType']==='delete') {\n        setDeletePresent(true)\n\n        sourceDelete.push(maxwellCount[index]['datalakeCount'])\n        datalakeDelete.push(maxwellCount[index]['count'])\n        if(maxwellCount[index]['isValidated']==='SUCCESS') {\n\n          sourceDeleteHovColor.push('rgba(86, 86, 252, 0.5)')\n          datalakeDeleteHovColor.push('rgba(0, 0, 255, 0.5)')\n\n          // datalakeDeleteHovColor.push('rgba(86, 86, 252, 0.5)')\n\n        } else {\n          sourceDeleteHovColor.push('rgb(238, 94, 94)')\n          datalakeDeleteHovColor.push('red')\n        }\n      }\n      if(!date.includes(maxwellCount[index]['computedDate'].slice(0,10))) {\n\n        date.push(maxwellCount[index]['computedDate'].slice(0,10))\n      }\n      if(maxwellCount[index]['isValidated']!=='SUCCESS') {\n        thresholdCount+=1\n        setThresholdBreached(true)\n      }\n    };\n\n    if(thresholdCount===requiredLength) {\n      setMaxwellThresholdBreachedCount(true)\n    }\n\n    setMaxwellSourceInsert(sourceInsert)\n    setMaxwellDatalakeInsert(datalakeInsert)\n\n    setMaxwellSourceUpdate(sourceUpdate)\n    setMaxwellDatalakeUpdate(datalakeUpdate)\n\n    setMaxwellSourceDelete(sourceDelete)\n    setMaxwellDatalakeDelete(datalakeDelete)\n\n    setMaxwellDate(date)\n    setStartDate(date[0])\n\n    setMaxwellSourceInsertHovColor(sourceInsertHovColor)\n    setMaxwellDatalakeInsertHovColor(datalakeInsertHovColor)\n    setMaxwellSourceUpdateHovColor(sourceUpdateHovColor)\n    setMaxwellDatalakeUpdateHovColor(datalakeUpdateHovColor)\n    setMaxwellSourceDeleteHovColor(sourceDeleteHovColor)\n    setMaxwellDatalakeDeleteHovColor(datalakeDeleteHovColor)\n\n  }\n\n  // for mongo \n  const getMongoValue=() => {\n    let requiredLength=mongoCount.length\n\n    let sourceInsert=[]\n    let datalakeInsert=[]\n    let sourceUpdate=[]\n    let datalakeUpdate=[]\n    let sourceDelete=[]\n    let datalakeDelete=[]\n    let sourceReplace=[]\n    let datalakeReplace=[]\n    let date=[]\n    let thresholdCount=0\n\n\n    let sourceInsertBackgroundColor=[]\n    let datalakeInsertBackgroundColor=[]\n    let sourceUpdateBackgroundColor=[]\n    let datalakeUpdateBackgroundColor=[]\n    let sourceDeleteBackgroundColor=[]\n    let datalakeDeleteBackgroundColor=[]\n    let sourceReplaceBackgroundColor=[]\n    let datalakeReplaceBackgroundColor=[]\n\n\n    for(let index=0; index<requiredLength; index++) {\n      if(mongoCount[index]['queryType']==='insert') {\n        setMongoInsertPresent(true)\n        sourceInsert.push(mongoCount[index]['count'])\n        datalakeInsert.push(mongoCount[index]['datalakeCount'])\n        if(mongoCount[index]['isValidated']==='SUCCESS') {\n          sourceInsertBackgroundColor.push('rgba(70, 69, 69, 0.2)')\n          datalakeInsertBackgroundColor.push('rgba(0, 0, 0, 0.2)')\n\n        } else {\n          sourceInsertBackgroundColor.push('rgb(238, 94, 94)')\n          datalakeInsertBackgroundColor.push('red')\n\n\n        }\n      }\n      if(mongoCount[index]['queryType']==='update') {\n        setMongoUpdatePresent(true)\n        sourceUpdate.push(mongoCount[index]['count'])\n        datalakeUpdate.push(mongoCount[index]['datalakeCount'])\n\n        if(mongoCount[index]['isValidated']==='SUCCESS') {\n          sourceUpdateBackgroundColor.push('rgb(252, 204, 115)')\n          datalakeUpdateBackgroundColor.push('rgb(250, 188, 74)')\n\n        } else {\n          sourceUpdateBackgroundColor.push('rgb(238, 94, 94)')\n          datalakeUpdateBackgroundColor.push('red')\n        }\n      }\n      if(mongoCount[index]['queryType']==='delete') {\n        setMongoDeletePresent(true)\n\n        sourceDelete.push(mongoCount[index]['count'])\n        datalakeDelete.push(mongoCount[index]['datalakeCount'])\n        if(mongoCount[index]['isValidated']==='SUCCESS') {\n\n          sourceDeleteBackgroundColor.push('rgba(86, 86, 252, 0.5)')\n          datalakeDeleteBackgroundColor.push('rgba(0, 0, 255, 0.5)')\n\n          // datalakeDeleteBackgroundColor.push('rgba(86, 86, 252, 0.5)')\n\n        } else {\n          sourceDeleteBackgroundColor.push('rgb(238, 94, 94)')\n          datalakeDeleteBackgroundColor.push('red')\n        }\n      }\n      if(mongoCount[index]['queryType']==='replace') {\n        setMongoReplacePresent(true)\n        sourceReplace.push(mongoCount[index]['count'])\n        datalakeReplace.push(mongoCount[index]['datalakeCount'])\n        if(mongoCount[index]['isValidated']==='SUCCESS') {\n\n          sourceReplaceBackgroundColor.push('rgb(173, 243, 115)')\n          datalakeReplaceBackgroundColor.push('rgb(116, 240, 15)')\n\n          // datalakeDeleteBackgroundColor.push('rgba(86, 86, 252, 0.5)')\n\n        } else {\n          sourceReplaceBackgroundColor.push('rgb(238, 94, 94)')\n          datalakeReplaceBackgroundColor.push('red')\n        }\n      }\n      if(!date.includes(mongoCount[index]['computedDate'].slice(0,10))) {\n\n        date.push(mongoCount[index]['computedDate'].slice(0,10))\n      }\n      if(mongoCount[index]['isValidated']!=='SUCCESS') {\n        thresholdCount+=1\n\n        setMongoThresholdBreached(true)\n      }\n    };\n    if(thresholdCount===requiredLength) {\n      setMongoThresholdBreachedCount(true)\n    }\n\n\n\n    setMongoSourceInsert(sourceInsert)\n    setMongoDatalakeInsert(datalakeInsert)\n\n    setMongoSourceUpdate(sourceUpdate)\n    setMongoDatalakeUpdate(datalakeUpdate)\n\n    setMongoSourceDelete(sourceDelete)\n    setMongoDatalakeDelete(datalakeDelete)\n\n    setMongoSourceReplace(sourceReplace)\n    setMongoDatalakeReplace(datalakeReplace)\n\n    setMongoSourceReplaceBackgroundColor(sourceReplaceBackgroundColor)\n    setMongoDatalakeReplaceBackgroundColor(datalakeReplaceBackgroundColor)\n\n    setMongoSourceInsertBackgroundColor(sourceInsertBackgroundColor)\n    setMongoDatalakeInsertBackgroundColor(datalakeInsertBackgroundColor)\n    setMongoSourceUpdateBackgroundColor(sourceUpdateBackgroundColor)\n    setMongoDatalakeUpdateBackgroundColor(datalakeUpdateBackgroundColor)\n    setMongoSourceDeleteBackgroundColor(sourceDeleteBackgroundColor)\n    setMongoDatalakeDeleteBackgroundColor(datalakeDeleteBackgroundColor)\n\n    setMongoDate(date)\n    setStartDate(date[0])\n\n  }\n  useEffect(() => {\n    if(chart.sqoopChart!==null&&chart.sqoopChart.data!==undefined&&chart.sqoopChart.data.datasets[0]!==undefined) {\n\n      chart.sqoopChart.data.datasets[0].data=sqoopSourceData\n      chart.sqoopChart.data.datasets[0].backgroundColor=sqoopSourceDataColor\n      // chart.sqoopChart.data.datasets\n      chart.sqoopChart.data.datasets[1].data=sqoopDatalakeData\n      chart.sqoopChart.data.datasets[1].backgroundColor=sqoopDatalakeDataColor\n\n      chart.sqoopChart.data.labels=sqoopCountDate\n      chart.sqoopChart.update()\n    }\n\n  },[sqoopSourceData,sqoopDatalakeData,sqoopCountDate,sqoopSourceDataColor,sqoopDatalakeDataColor])\n  useEffect(() => {\n\n    if(chart.maxwellChartOne!==null) {\n\n\n\n      if(maxwellSourceInsert!==null&&maxwellSourceInsert.length!==0) {\n\n        maxwellChartOneDataset.push(\n          {\n            label: \"Source Insert\",\n            backgroundColor: maxwellSourceInsertHovColor,\n            borderWidth: 1,\n            data: maxwellSourceInsert,\n            categoryPercentage: 0.9,\n          },\n          {\n            label: \"Datalake Insert\",\n            backgroundColor: maxwellDatalakeInsertHovColor,\n            borderWidth: 1,\n            data: maxwellDatalakeInsert,\n            categoryPercentage: 0.9,\n          },\n        )\n      }\n      if(maxwellSourceUpdate!==null&&maxwellSourceUpdate.length!==0) {\n        maxwellChartOneDataset.push(\n          {\n            label: \"Source update\",\n            backgroundColor: maxwellSourceUpdateHovColor,\n            borderWidth: 1,\n            data: maxwellSourceUpdate,\n            categoryPercentage: 0.9,\n          },\n          {\n            label: \"Datalake update\",\n            backgroundColor: maxwellDatalakeUpdateHovColor,\n            borderWidth: 1,\n            data: maxwellDatalakeUpdate,\n            categoryPercentage: 0.9,\n\n\n          },\n        )\n      }\n      if(maxwellSourceDelete!==null&&maxwellSourceDelete.length!==0) {\n        maxwellChartOneDataset.push(\n          {\n            label: \"Source delete\",\n            backgroundColor: maxwellSourceDeleteHovColor,\n            borderWidth: 1,\n            data: maxwellSourceDelete,\n            categoryPercentage: 0.9,\n          },\n          {\n            label: \"Datalake delete\",\n            backgroundColor: maxwellDatalakeDeleteHovColor,\n            borderWidth: 1,\n            data: maxwellDatalakeDelete,\n            categoryPercentage: 0.9,\n\n\n          },\n        )\n      }\n\n      chart.maxwellChartOne.data.datasets=maxwellChartOneDataset\n      chart.maxwellChartOne.data.labels=maxwellDate\n\n      chart.maxwellChartOne.update()\n\n\n\n\n\n\n    }\n\n  },[maxwellSourceInsert,thresholdBreached,UpdatePresent,InsertPresent,DeletePresent,maxwellDatalakeInsert,maxwellSourceUpdate,maxwellDatalakeUpdate,maxwellSourceDelete,maxwellDatalakeDelete,maxwellDate])\n\n  // for updating mongo chart\n  useEffect(() => {\n    if(chart.mongoChart!==null) {\n\n\n      if(mongoSourceInsert!==null&&mongoSourceInsert.length!==0) {\n        mongoDataset.push(\n          {\n            label: \"Source Insert\",\n            backgroundColor: mongoSourceInsertBackgroundColor,\n            borderWidth: 1,\n            data: mongoSourceInsert,\n            categoryPercentage: 0.9,\n          },\n          {\n            label: \"Datalake Insert\",\n            backgroundColor: mongoDatalakeInsertBackgroundColor,\n            borderWidth: 1,\n            data: mongoDatalakeInsert,\n            categoryPercentage: 0.9,\n          },\n        )\n      }\n      if(mongoSourceUpdate!==null&&mongoSourceUpdate.length!==0) {\n        mongoDataset.push(\n          {\n            label: \"Source update\",\n            backgroundColor: mongoSourceUpdateBackgroundColor,\n            borderWidth: 1,\n            data: mongoSourceUpdate,\n            categoryPercentage: 0.9,\n          },\n          {\n            label: \"Datalake update\",\n            backgroundColor: mongoDatalakeUpdateBackgroundColor,\n            borderWidth: 1,\n            data: mongoDatalakeUpdate,\n            categoryPercentage: 0.9,\n\n\n          },\n        )\n\n      }\n      if(mongoSourceDelete!==null&&mongoSourceDelete.length!==0) {\n        mongoDataset.push(\n          {\n            label: \"Source delete\",\n            backgroundColor: mongoSourceDeleteBackgroundColor,\n            borderWidth: 1,\n            data: mongoSourceDelete,\n            categoryPercentage: 0.9,\n          },\n          {\n            label: \"Datalake delete\",\n            backgroundColor: mongoDatalakeDeleteBackgroundColor,\n            borderWidth: 1,\n            data: mongoDatalakeDelete,\n            categoryPercentage: 0.9,\n\n\n          },\n        )\n      }\n      if(mongoSourceReplace!==null&&mongoSourceReplace.length!==0) {\n        mongoDataset.push(\n          {\n            label: \"Source replace\",\n            backgroundColor: mongoSourceReplaceBackgroundColor,\n            borderWidth: 1,\n            data: mongoSourceReplace,\n            categoryPercentage: 0.9,\n          },\n          {\n            label: \"Datalake replace\",\n            backgroundColor: mongoDatalakeReplaceBackgroundColor,\n            borderWidth: 1,\n            data: mongoDatalakeReplace,\n            categoryPercentage: 0.9,\n\n\n          },\n        )\n      }\n      chart.mongoChart.data.datasets=mongoDataset\n      chart.mongoChart.data.labels=mongoDate\n      chart.mongoChart.update()\n    }\n\n\n\n  },[mongoSourceInsert,mongoThresholdBreached,mongoUpdatePresent,mongoInsertPresent,mongoDeletePresent,mongoDatalakeInsert,mongoSourceUpdate,mongoDatalakeUpdate,mongoSourceDelete,mongoDatalakeDelete,mongoDate])\n\n\n  useEffect(() => {\n    let chartStatus1=Chart.getChart(\"myChart-stack\");\n\n\n    if(events['ingestionStrategy']?.toLowerCase()=='sqoop') {\n      if(chartStatus1==undefined) {\n\n        createChart()\n        getsqoopValue()\n\n      } else {\n        getsqoopValue()\n\n      }\n    }\n\n  },[events,sqoopCount,sqoopThresholdBreached])\n  useEffect(() => {\n    let chartStatusTwo=Chart.getChart(\"myChart-maxwell-one\");\n\n\n    if(events['ingestionStrategy']?.toLowerCase()=='maxwell') {\n\n      if(chartStatusTwo===undefined) {\n        createMaxwellChartOne()\n        getMaxwellValue()\n\n      } else {\n        getMaxwellValue()\n\n      }\n    }\n\n  },[events,maxwellCount])\n  useEffect(() => {\n    let chartStatusThree=Chart.getChart(\"myChart-mongo\");\n\n\n    if(events.sourceType?.toLowerCase()==='mongo') {\n      if(chartStatusThree==undefined) {\n\n        createMongoChart()\n        getMongoValue()\n\n      } else {\n        getMongoValue()\n\n      }\n    }\n\n  },[events,mongoCount])\n\n  const handleupdatingMaxwellData=(value,showStatus,thresholdList) => {\n    let sourceInsertingData={\n      label: \"Source Insert\",\n      backgroundColor: maxwellSourceInsertHovColor,\n      borderWidth: 1,\n      data: maxwellSourceInsert,\n      categoryPercentage: 0.9,\n    }\n    let datalakeInsertingData={\n      label: \"Datalake Insert\",\n      backgroundColor: maxwellDatalakeInsertHovColor,\n      borderWidth: 1,\n      data: maxwellDatalakeInsert,\n      categoryPercentage: 0.9,\n    }\n    let sourceUpdatingData={\n      label: \"Source update\",\n      backgroundColor: maxwellSourceUpdateHovColor,\n      borderWidth: 1,\n      data: maxwellSourceUpdate,\n      categoryPercentage: 0.9,\n    }\n    let datalakeUpdatingData={\n      label: \"Datalake update\",\n      backgroundColor: maxwellDatalakeUpdateHovColor,\n      borderWidth: 1,\n      data: maxwellDatalakeUpdate,\n      categoryPercentage: 0.9,\n\n\n    }\n    let sourceDeleteData={\n      label: \"Source delete\",\n      backgroundColor: maxwellSourceDeleteHovColor,\n      borderWidth: 1,\n      data: maxwellSourceDelete,\n      categoryPercentage: 0.9,\n    }\n    let datalakeDeleteData={\n      label: \"Datalake delete\",\n      backgroundColor: maxwellDatalakeDeleteHovColor,\n      borderWidth: 1,\n      data: maxwellDatalakeDelete,\n      categoryPercentage: 0.9,\n\n\n    }\n\n\n    if(chart.maxwellChartOne!==null) {\n\n      let newmaxwekkChart=[]\n\n      if(maxwellSourceInsert!==null&&maxwellSourceInsert.length!==0) {\n\n        if(value=='insert'&&showStatus==true) {\n          // if (addCenterLine.datalakeInsert == false) {\n\n          newmaxwekkChart.push(\n            sourceInsertingData,\n            datalakeInsertingData\n          )\n          if(checking.update==true) {\n\n            newmaxwekkChart.push(\n              sourceUpdatingData,\n              datalakeUpdatingData\n            )\n          }\n          if(checking.delete==true) {\n\n            newmaxwekkChart.push(\n              sourceDeleteData,\n              datalakeDeleteData\n            )\n          }\n\n        } else if(value=='insert'&&showStatus==false) {\n\n          if(checking.update==true) {\n\n            newmaxwekkChart.push(\n              sourceUpdatingData,\n              datalakeUpdatingData\n            )\n          }\n          if(checking.delete==true) {\n\n            newmaxwekkChart.push(\n              sourceDeleteData,\n              datalakeDeleteData\n            )\n          }\n          if(checking.delete==false&&checking.update==false) {\n\n\n            newmaxwekkChart.push(\n              sourceInsertingData,\n              datalakeInsertingData,\n            )\n            if(maxwellSourceUpdate!==null&&maxwellSourceUpdate.length!==0) {\n\n              newmaxwekkChart.push(\n                sourceUpdatingData,\n                datalakeUpdatingData,\n              )\n            }\n            if(maxwellSourceDelete!==null&&maxwellSourceDelete.length!==0) {\n\n              newmaxwekkChart.push(\n                sourceDeleteData,\n                datalakeDeleteData\n              )\n            }\n          }\n\n        }\n\n      }\n      if(maxwellSourceUpdate!==null&&maxwellSourceUpdate.length!==0) {\n        if(value=='update'&&showStatus==true) {\n          if(checking.insert==true) {\n\n            newmaxwekkChart.push(\n              sourceInsertingData,\n              datalakeInsertingData\n            )\n          }\n          newmaxwekkChart.push(\n            sourceUpdatingData,\n            datalakeUpdatingData\n          )\n          if(checking.delete==true) {\n\n            newmaxwekkChart.push(\n              sourceDeleteData,\n              datalakeDeleteData\n            )\n          }\n\n        }\n        else if(value=='update'&&showStatus==false) {\n\n          if(checking.insert==true) {\n\n            newmaxwekkChart.push(\n              sourceInsertingData,\n              datalakeInsertingData\n            )\n          }\n          if(checking.delete==true) {\n\n            newmaxwekkChart.push(\n              sourceDeleteData,\n              datalakeDeleteData\n            )\n          }\n          if(checking.insert==false&&checking.delete==false) {\n\n\n            if(maxwellSourceInsert!==null&&maxwellSourceInsert.length!==0) {\n              newmaxwekkChart.push(\n                sourceInsertingData,\n                datalakeInsertingData,\n              )\n            }\n\n            newmaxwekkChart.push(\n              sourceUpdatingData,\n              datalakeUpdatingData,\n            )\n\n            if(maxwellSourceDelete!==null&&maxwellSourceDelete.length!==0) {\n\n              newmaxwekkChart.push(\n                sourceDeleteData,\n                datalakeDeleteData\n              )\n            }\n          }\n\n        }\n      }\n\n\n\n      if(maxwellSourceDelete!==null&&maxwellSourceDelete.length!==0) {\n\n        if(value=='delete'&&showStatus==true) {\n          // if (addCenterLine.datalakeDelete == false) {\n          if(checking.insert==true) {\n\n            newmaxwekkChart.push(\n              sourceInsertingData,\n              datalakeInsertingData\n            )\n          }\n\n          if(checking.update==true) {\n\n            newmaxwekkChart.push(\n              sourceUpdatingData,\n              datalakeUpdatingData\n            )\n          }\n          newmaxwekkChart.push(\n            sourceDeleteData,\n            datalakeDeleteData\n          )\n          // }\n        } else if(value=='delete'&&showStatus==false) {\n\n          if(checking.insert==true) {\n\n            newmaxwekkChart.push(\n              sourceInsertingData,\n              datalakeInsertingData\n            )\n          }\n          if(checking.update==true) {\n\n            newmaxwekkChart.push(\n              sourceUpdatingData,\n              datalakeUpdatingData\n            )\n          }\n          if(checking.insert==false&&checking.update==false) {\n\n            if(maxwellSourceInsert!==null&&maxwellSourceInsert.length!==0) {\n              newmaxwekkChart.push(\n                sourceInsertingData,\n                datalakeInsertingData,\n              )\n            }\n            if(maxwellSourceUpdate!==null&&maxwellSourceUpdate.length!==0) {\n              newmaxwekkChart.push(\n                sourceUpdatingData,\n                datalakeUpdatingData,\n              )\n            }\n            newmaxwekkChart.push(\n              sourceDeleteData,\n              datalakeDeleteData\n            )\n          }\n\n        }\n\n      }\n\n      chart.maxwellChartOne.data.datasets=newmaxwekkChart\n      chart.maxwellChartOne.data.labels=maxwellDate\n\n      chart.maxwellChartOne.update()\n    }\n    // }\n\n  }\n\n\n  // mongo db start handle legend button\n  // if (chart.mongoChart !== null) {\n  // }\n  // handleMongothreshold\n  const handleupdatingMongoData=(value,showStatus,thresholdList) => {\n    let sourceInsertingData={\n      label: \"Source Insert\",\n      backgroundColor: mongoSourceInsertBackgroundColor,\n      borderWidth: 1,\n      data: mongoSourceInsert,\n      categoryPercentage: 0.9,\n    }\n    let datalakeInsertingData={\n      label: \"Datalake Insert\",\n      backgroundColor: mongoDatalakeInsertBackgroundColor,\n      borderWidth: 1,\n      data: mongoDatalakeInsert,\n      categoryPercentage: 0.9,\n    }\n    let sourceUpdatingData={\n      label: \"Source update\",\n      backgroundColor: mongoSourceUpdateBackgroundColor,\n      borderWidth: 1,\n      data: mongoSourceUpdate,\n      categoryPercentage: 0.9,\n    }\n    let datalakeUpdatingData={\n      label: \"Datalake update\",\n      backgroundColor: mongoDatalakeUpdateBackgroundColor,\n      borderWidth: 1,\n      data: mongoDatalakeUpdate,\n      categoryPercentage: 0.9,\n\n\n    }\n    let sourceDeleteData={\n      label: \"Source delete\",\n      backgroundColor: mongoSourceDeleteBackgroundColor,\n      borderWidth: 1,\n      data: mongoSourceDelete,\n      categoryPercentage: 0.9,\n    }\n    let datalakeDeleteData={\n      label: \"Datalake delete\",\n      backgroundColor: mongoDatalakeDeleteBackgroundColor,\n      borderWidth: 1,\n      data: mongoDatalakeDelete,\n      categoryPercentage: 0.9,\n\n\n    }\n    // let sourceReplaceData = {\n    //   label: \"Source replace\",\n    //   backgroundColor: mongoSourceReplaceBackgroundColor,\n    //   borderWidth: 1,\n    //   data: mongoSourceReplace,\n    //   categoryPercentage: 0.9,\n    // }\n    // let datalakeReplaceData = {\n    //   label: \"Datalake replace\",\n    //   backgroundColor: mongoDatalakeReplaceBackgroundColor,\n    //   borderWidth: 1,\n    //   data: mongoDatalakeReplace,\n    //   categoryPercentage: 0.9,\n\n\n    // }\n    if(chart.mongoChart!==null) {\n\n      let newMongoChart=[]\n\n      if(mongoSourceInsert!==null&&mongoSourceInsert.length!==0) {\n\n        if(value=='insert'&&showStatus==true) {\n\n          newMongoChart.push(\n            sourceInsertingData,\n            datalakeInsertingData\n          )\n          if(checking.update==true) {\n\n            newMongoChart.push(\n              sourceUpdatingData,\n              datalakeUpdatingData\n            )\n          }\n          if(checking.delete==true) {\n\n            newMongoChart.push(\n              sourceDeleteData,\n              datalakeDeleteData\n            )\n          }\n        } else if(value=='insert'&&showStatus==false) {\n\n          if(checking.update==true) {\n\n            newMongoChart.push(\n              sourceUpdatingData,\n              datalakeUpdatingData\n            )\n          }\n          if(checking.delete==true) {\n\n            newMongoChart.push(\n              sourceDeleteData,\n              datalakeDeleteData\n            )\n          }\n          if(checking.delete==false&&checking.update==false) {\n\n\n            newMongoChart.push(\n              sourceInsertingData,\n              datalakeInsertingData,\n            )\n            if(maxwellSourceUpdate!==null&&maxwellSourceUpdate.length!==0) {\n\n              newMongoChart.push(\n                sourceUpdatingData,\n                datalakeUpdatingData,\n              )\n            }\n            if(maxwellSourceDelete!==null&&maxwellSourceDelete.length!==0) {\n\n              newMongoChart.push(\n                sourceDeleteData,\n                datalakeDeleteData\n              )\n            }\n          }\n\n        }\n\n      }\n      if(mongoSourceUpdate!==null&&mongoSourceUpdate.length!==0) {\n\n        if(value=='update'&&showStatus==true) {\n          if(checking.insert==true) {\n\n            newMongoChart.push(\n              sourceInsertingData,\n              datalakeInsertingData\n            )\n          }\n          newMongoChart.push(\n            sourceUpdatingData,\n            datalakeUpdatingData\n          )\n          if(checking.delete==true) {\n\n            newMongoChart.push(\n              sourceDeleteData,\n              datalakeDeleteData\n            )\n          }\n\n\n        } else if(value=='update'&&showStatus==false) {\n\n          if(checking.insert==true) {\n\n            newMongoChart.push(\n              sourceInsertingData,\n              datalakeInsertingData\n            )\n          }\n          if(checking.delete==true) {\n\n            newMongoChart.push(\n              sourceDeleteData,\n              datalakeDeleteData\n            )\n          }\n          if(checking.insert==false&&checking.delete==false) {\n\n\n            if(maxwellSourceInsert!==null&&maxwellSourceInsert.length!==0) {\n              newMongoChart.push(\n                sourceInsertingData,\n                datalakeInsertingData,\n              )\n            }\n\n            newMongoChart.push(\n              sourceUpdatingData,\n              datalakeUpdatingData,\n            )\n\n            if(maxwellSourceDelete!==null&&maxwellSourceDelete.length!==0) {\n\n              newMongoChart.push(\n                sourceDeleteData,\n                datalakeDeleteData\n              )\n            }\n          }\n        }\n\n\n      }\n      if(mongoSourceDelete!==null&&mongoSourceDelete.length!==0) {\n\n        if(value=='delete'&&showStatus==true) {\n\n          if(checking.insert==true) {\n\n            newMongoChart.push(\n              sourceInsertingData,\n              datalakeInsertingData\n            )\n          }\n\n          if(checking.update==true) {\n\n            newMongoChart.push(\n              sourceUpdatingData,\n              datalakeUpdatingData\n            )\n          }\n          newMongoChart.push(\n            sourceDeleteData,\n            datalakeDeleteData\n          )\n        } else if(value=='delete'&&showStatus==false) {\n          if(checking.insert==true) {\n\n            newMongoChart.push(\n              sourceInsertingData,\n              datalakeInsertingData\n            )\n          }\n          if(checking.update==true) {\n\n            newMongoChart.push(\n              sourceUpdatingData,\n              datalakeUpdatingData\n            )\n          }\n          if(checking.insert==false&&checking.update==false) {\n\n            if(maxwellSourceInsert!==null&&maxwellSourceInsert.length!==0) {\n              newMongoChart.push(\n                sourceInsertingData,\n                datalakeInsertingData,\n              )\n            }\n            if(maxwellSourceUpdate!==null&&maxwellSourceUpdate.length!==0) {\n              newMongoChart.push(\n                sourceUpdatingData,\n                datalakeUpdatingData,\n              )\n            }\n            // if (maxwellSourceDelete !== null && maxwellSourceDelete.length !== 0) {\n            newMongoChart.push(\n              sourceDeleteData,\n              datalakeDeleteData\n            )\n            // }\n          }\n        }\n\n      }\n\n\n\n      chart.mongoChart.data.datasets=newMongoChart\n      chart.mongoChart.data.labels=mongoDate\n\n      chart.mongoChart.update()\n    }\n\n  }\n\n  // mongo db end handle legend button\n\n  // const date = new Date\n  const createChart=() => {\n    const ctxOne=document.getElementById('myChart-stack').getContext('2d')\n    chart.sqoopChart=new Chart(ctxOne,{\n      type: 'bar',\n      data: {\n        labels: '',\n        datasets: [\n          {\n            label: \"Source count\",\n            backgroundColor: 'rgba(0, 0, 255, 0.5)',\n            borderWidth: 0.8,\n            data: null,\n            barPercentage: .9,\n          },\n          {\n            label: \"Datalake count\",\n            backgroundColor: 'rgba(0, 0, 0, 0.2)',\n            borderWidth: 0.8,\n            data: null,\n            barPercentage: .9,\n          },\n        ]\n      },\n\n      options: {\n        plugins: {\n          legend: {\n            display: false,\n          },\n          title: {\n          },\n        },\n\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              stacked: true,\n\n              gridLines: {\n                offsetGridLines: true\n              },\n              ticks: {\n                min: 0\n              }\n            },\n          ],\n          yAxes: [\n\n            {\n              display: true,\n              ticks: {\n                beginAtZero: true,\n              }\n            },\n          ],\n\n        }\n      }\n    }\n    )\n\n\n  }\n\n\n  const createMongoChart=() => {\n    const ctxThree=document.getElementById('myChart-mongo').getContext('2d')\n\n    chart.mongoChart=new Chart(ctxThree,{\n      type: 'bar',\n\n\n      data: {\n        labels: [],\n        datasets: mongoDataset,\n      },\n      // plugins:[ChartDataLabels],\n      options: {\n        plugins: {\n          legend: {\n            display: false,\n          },\n          // datalabels:{\n          //   // anchor: 'end',\n          //   align:'top',\n          //   rotation:90,\n          // },\n          display: 'auto',\n\n        },\n        scales: {\n          x: {\n            stacked: false\n          },\n        }\n      }\n\n    }\n    )\n\n\n  }\n\n\n\n  const handleCallingProcessedApi=() => {\n    let newChecking=checking\n\n    if(chart.sqoopChart!==null) {\n      if(validDate==true) {\n\n        dispatch(getSqoopDataWithTimeWindow(selectedTenant,selectedEvent,startDate,timeWindow))\n      }\n    }\n\n    if(chart.maxwellChartOne!==null) {\n      if(validDate==true) {\n\n        dispatch(getMaxwellDataWithTimwWindow(selectedTenant,selectedEvent,startDate,timeWindow))\n      }\n\n\n    }\n    if(chart.mongoChart!==null) {\n      if(validDate==true) {\n\n        dispatch(getMongoDataWithTimeWindow(selectedTenant,selectedEvent,startDate,timeWindow))\n      }\n    }\n\n    newChecking.insert=false\n    newChecking.update=false\n    newChecking.delete=false\n\n    setChecking({...newChecking})\n\n\n  }\n\n  const handleStartDate=(e) => {\n\n    let maxDate=handleDate().split('-')\n    let maxDay=parseInt(maxDate[2])\n    let maxMonth=parseInt(maxDate[1])\n    let maxYear=parseInt(maxDate[0])\n    let date=e.target.value.split('-')\n    let day=parseInt(date[2])\n    let month=parseInt(date[1])\n    let year=parseInt(date[0])\n    let flag=false\n\n    if(year>2021&&year<=maxYear) {\n\n      if(month<=maxMonth) {\n\n        setStartDate(e.target.value)\n        setValidDate(true)\n        flag=false\n\n      } else {\n        flag=true\n      }\n    } else {\n      flag=true\n\n    }\n    if(flag==true) {\n      setValidDate(false)\n\n    }\n  }\n  const handleTimeWindow=(e) => {\n    if(e.target.value<31) {\n\n      setTimeWindow(e.target.value)\n    }\n  }\n\n  const handleUpdatingSqoopData=(value,showStatus) => {\n    let sourceCount={\n      label: \"Source count\",\n      backgroundColor: sqoopSourceDataColor,\n      borderWidth: 0.8,\n      data: sqoopSourceData,\n      barPercentage: .9,\n    }\n    let datalakeCount={\n      label: \"Datalake count\",\n      backgroundColor: sqoopDatalakeDataColor,\n      borderWidth: 0.8,\n      data: sqoopDatalakeData,\n      barPercentage: .9,\n    }\n\n    let newSqoopData=[]\n    if(value=='count'&&showStatus==true) {\n      newSqoopData.push(\n        sourceCount,\n        datalakeCount\n      )\n    }\n    chart.sqoopChart.data.datasets=newSqoopData\n    chart.sqoopChart.data.labels=sqoopCountDate\n    chart.sqoopChart.update()\n  }\n\n  const handleDataShowing=(value) => {\n\n    let newChecking=checking\n    if(value=='insert') {\n      if(checking.insert==false) {\n        newChecking.insert=true\n        if(chart.maxwellChartOne!==null) {\n          handleupdatingMaxwellData('insert',true)\n\n        }\n        if(chart.mongoChart!==null) {\n          handleupdatingMongoData('insert',true)\n\n        }\n      } else {\n        newChecking.insert=false\n        if(chart.maxwellChartOne!==null) {\n\n          handleupdatingMaxwellData('insert',false)\n\n        }\n        if(chart.mongoChart!==null) {\n          handleupdatingMongoData('insert',false)\n\n        }\n      }\n\n    } else if(value=='update') {\n      if(checking.update==false) {\n        newChecking.update=true\n        if(chart.maxwellChartOne!==null) {\n          handleupdatingMaxwellData('update',true)\n        }\n        if(chart.mongoChart!==null) {\n          handleupdatingMongoData('update',true)\n\n        }\n\n      } else {\n        newChecking.update=false\n        if(chart.maxwellChartOne!==null) {\n          handleupdatingMaxwellData('update',false)\n        }\n        if(chart.mongoChart!==null) {\n          handleupdatingMongoData('update',false)\n        }\n      }\n    } else if(value=='delete') {\n      if(checking.delete==false) {\n        newChecking.delete=true\n        if(chart.maxwellChartOne!==null) {\n          handleupdatingMaxwellData('delete',true)\n        }\n        if(chart.mongoChart!==null) {\n          handleupdatingMongoData('delete',true)\n\n        }\n      } else {\n        newChecking.delete=false\n        if(chart.maxwellChartOne!==null) {\n          handleupdatingMaxwellData('delete',false)\n\n        }\n        if(chart.mongoChart!==null) {\n          handleupdatingMongoData('delete',false)\n\n        }\n      }\n    } else if(value=='count') {\n      if(checking.count==false) {\n        newChecking.count=true\n        if(chart.sqoopChart!==null) {\n          handleUpdatingSqoopData('count',true)\n        }\n\n      } else {\n        newChecking.count=false\n        if(chart.sqoopChart!==null) {\n          handleUpdatingSqoopData('count',false)\n        }\n      }\n\n    }\n\n    setChecking({...newChecking})\n  }\n  const handleDate=() => {\n    let date=new Date().toLocaleDateString().split('/')\n\n    let day=date[0]\n    let month=date[1]\n    let year=date[2]\n    if(day.length==1) {\n      day=`0${day}`\n    }\n    if(month.length==1) {\n      month=`0${month}`\n    }\n    let newModifiedDate=year+'-'+month+'-'+day\n\n    return newModifiedDate\n\n  }\n  return (\n    <div className=\"right-stacked\">\n      <div className=\"date-row\">\n\n        <div className=\"start-date\">\n          <p>\n            Starting date\n          </p>\n          <input type=\"date\"\n            min=\"2022-01-01\"\n            onChange={handleStartDate}\n            defaultValue={startDate}\n            value={startDate}\n\n            max={handleDate()}\n\n          >\n          </input>\n        </div>\n        <div className=\"time-window\">\n          <p>\n            Time Window in days\n          </p>\n          <input\n            type=\"number\"\n            min={1}\n            onChange={handleTimeWindow}\n            defaultValue={7}\n            value={timeWindow}\n\n            max={30}\n          >\n          </input>\n        </div>\n        <button\n          onClick={handleCallingProcessedApi}\n        >\n          Go\n        </button>\n      </div>\n      {events.ingestionStrategy?.toLowerCase()==='maxwell'&&<>\n\n        <div className=\"customLegend-one\">\n          {InsertPresent&&<>\n            <div className=\"main\"\n              onClick={() => handleDataShowing('insert')}\n            >\n              <input type=\"checkbox\"\n                id=\"CheckInsert\"\n                checked={checking.insert==true? 'checked':''}\n              />\n              <p>\n                Source/ Datalake Insert\n              </p>\n            </div>\n\n          </>}\n          {UpdatePresent&&<>\n            <div className=\"main\"\n              onClick={() => handleDataShowing('update')}\n            >\n              <input type=\"checkbox\" id=\"CheckUpdate\"\n                checked={checking.update==true? 'checked':''}\n\n              />\n\n              <p>\n                Source/ Datalake Update\n              </p>\n            </div>\n          </>\n          }\n          {DeletePresent&&<>\n            <div className=\"main\"\n              onClick={() => handleDataShowing('delete')}\n            >\n              <input type=\"checkbox\" id=\"CheckDelete\"\n                checked={checking.delete==true? 'checked':''}\n              />\n              <p>\n                Souce/ Datalake Delete\n              </p>\n            </div>\n          </>\n          }\n\n\n\n        </div>\n        {events.ingestionStrategy?.toLowerCase()==='maxwell'&&\n          <>\n            <canvas id=\"myChart-maxwell-one\" width=\"3\" height=\"1\"></canvas>\n          </>\n        }\n        <div className=\"customLegend\">\n          {(InsertPresent&&maxwellThresholdBreachedCount===false)&&<>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgba(70, 69, 69, 0.2)'}}></div>\n              <p>\n                Source Insert\n              </p>\n            </div>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgba(0, 0, 0, 0.2)'}}></div>\n\n              <p>\n                Datalake Insert\n              </p>\n            </div>\n          </>}\n          {(UpdatePresent&&maxwellThresholdBreachedCount===false)&&<>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgb(252, 204, 115)'}}></div>\n\n              <p>\n                Source update\n              </p>\n            </div>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgb(250, 188, 74)'}}></div>\n\n              <p>\n                Datalake update\n              </p>\n            </div></>}\n          {(DeletePresent&&maxwellThresholdBreachedCount===false)&&<>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgba(86, 86, 252, 0.5)'}}></div>\n\n              <p>\n                Source delete\n              </p>\n            </div>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgba(0, 0, 255, 0.5)'}}></div>\n\n              <p>\n                Datalake delete\n              </p>\n            </div></>}\n\n          {(thresholdBreached)&&<>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'red'}}></div>\n\n              <p>\n                Datalake Threshold Breached\n              </p>\n            </div>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgb(238, 94, 94)'}}></div>\n\n              <p>\n                Source Threshold Breached\n              </p>\n            </div>\n\n          </>\n          }\n\n\n        </div>\n      </>\n      }\n      {events.sourceType?.toLowerCase()==='mongo'&&<>\n\n        <div className=\"customLegend-one\">\n          {mongoInsertPresent&&<>\n            <div className=\"main\"\n              onClick={() => handleDataShowing('insert')}\n            >\n              <input type=\"checkbox\"\n                id=\"CheckInsert\"\n                checked={checking.insert==true? 'checked':''}\n              />\n              <p>\n                Source/ Datalake Insert\n\n              </p>\n            </div>\n          </>}\n\n\n\n          {mongoUpdatePresent&&<>\n            <div className=\"main\"\n              onClick={() => handleDataShowing('update')}\n            >\n              <input type=\"checkbox\" id=\"CheckUpdate\"\n                checked={checking.update==true? 'checked':''}\n              />\n              <p>\n                Source/ Datalake Update\n              </p>\n            </div>\n          </>}\n          {mongoDeletePresent&&<>\n            <div className=\"main\"\n              onClick={() => handleDataShowing('delete')}\n\n            >\n              <input type=\"checkbox\" id=\"CheckDelete\"\n                checked={checking.delete==true? 'checked':''}\n              />\n              <p>\n                Souce/ Datalake Delete\n              </p>\n            </div>\n\n          </>}\n\n        </div>\n\n        {events.sourceType?.toLowerCase()==='mongo'&&\n          <canvas id=\"myChart-mongo\" width=\"3\" height=\"1\"></canvas>}\n        <div className=\"customLegend\">\n          {(mongoInsertPresent&&mongoThresholdBreachedCount===false)&&<>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgba(70, 69, 69, 0.2)'}}></div>\n\n              <p>\n                Source Insert\n              </p>\n            </div>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgba(0, 0, 0, 0.2)'}}></div>\n\n              <p>\n                Datalake Insert\n              </p>\n            </div></>}\n\n\n\n          {(mongoUpdatePresent&&mongoThresholdBreachedCount===false)&&<>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgb(252, 204, 115)'}}></div>\n\n              <p>\n                Source update\n              </p>\n            </div>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgb(250, 188, 74)'}}></div>\n\n              <p>\n                Datalake update\n              </p>\n            </div></>}\n          {(mongoDeletePresent&&mongoThresholdBreachedCount===false)&&<>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgba(86, 86, 252, 0.5)'}}></div>\n\n              <p>\n                Source delete\n              </p>\n            </div>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgba(0, 0, 255, 0.5)'}}></div>\n\n              <p>\n                Datalake delete\n              </p>\n            </div></>}\n\n          {(mongoThresholdBreached)&&<>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'red'}}></div>\n\n              <p>\n                Datalake Threshold Breached\n              </p>\n            </div>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgb(238, 94, 94)'}}></div>\n\n              <p>\n                Source Threshold Breached\n              </p>\n            </div>\n\n          </>\n          }\n\n\n        </div>\n      </>\n      }\n      {events.ingestionStrategy?.toLowerCase()==='sqoop'&&<>\n        <div className=\"customLegend-one\">\n          {/* {sqoopThresholdBreachedCount === false && <>\n            <div className=\"main\"\n              onClick={() => handleDataShowing('count')}\n            >\n              <input type=\"checkbox\" id=\"count\"\n                checked={checking.count == true ? 'checked' : ''}\n              />\n              <p>\n                Source/ Datalake count\n              </p>\n            </div>\n          </>} */}\n\n        </div>\n        {/* <Sqoop /> */}\n        <canvas id=\"myChart-stack\" width=\"3\" height=\"1\"></canvas>\n        <div className=\"customLegend\">\n          {sqoopThresholdBreachedCount===false&&<>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgba(0, 0, 255, 0.5)'}}></div>\n\n              <p>\n                Source count\n              </p>\n            </div>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgba(0, 0, 0, 0.2)'}}></div>\n\n              <p>\n                Datalake count\n              </p>\n            </div></>}\n\n          {sqoopThresholdBreached&&<>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'rgb(238, 94, 94)'}}></div>\n\n              <p>\n                Source Threshold Breached\n              </p>\n            </div>\n            <div className=\"main\" >\n              <div className=\"color\" style={{backgroundColor: 'red'}}></div>\n\n              <p>\n                Datalake Threshold Breached\n              </p>\n            </div>\n          </>\n          }\n        </div>\n      </>\n      }\n    </div>\n\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}