{"ast":null,"code":"import { authenticationUrl, authenticationParam, backEndUrl } from \"../config\";\n\nconst axios = require('axios');\n\nexport const updateTenant = id => {\n  return {\n    type: 'UPDATE_SELECTED_TENANT',\n    payload: id\n  };\n};\nexport const updateName = name => {\n  return {\n    type: 'UPDATE_SELECTED_EVENT',\n    payload: name\n  };\n};\nexport const getUpdateActiveTab = tab => {\n  return dispatch => {\n    dispatch({\n      type: 'UPDATE_ACTIVE_TAB',\n      payload: tab\n    });\n  };\n};\nexport const updateHighlightedName = name => {\n  return {\n    type: 'UPDATE_HIGHLIGHTED_EVENT',\n    payload: name\n  };\n};\nexport const getUserType = () => {\n  return dispatch => {\n    // fetch(authenticationUrl,\n    //     {\n    //         method: 'GET',\n    //         credentials: 'include',\n    //         params: authenticationParam,\n    //         headers: {\n    //             'Accept': 'application/json',\n    //             // 'Accept': '*',\n    //             'Content-Type': 'application/json',\n    //             \"Access-Control-Allow-Methods\": \"GET,HEAD,OPTIONS,POST,PUT\",\n    //             'Access-Control-Allow-Origin': 'http://datalake.infoedge.com',\n    //             \"Access-Control-Allow-Credentials\": \"true\",\n    //             \"Access-Control-Allow-Headers\": \"Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers\"\n    //         }\n    //     }\n    // )\n    axios.get(authenticationUrl, {\n      params: authenticationParam // credentials: 'true',\n      // withCredentials: false,\n      // headers:{\n      //     'Accept': 'application/json',\n      //     'Content-Type': 'application/json',\n      // }\n\n    }).then(response => {\n      dispatch({\n        type: 'UPDATE_USER_TYPE',\n        payload: {\n          userType: response.data.userType,\n          isLoggedIn: true\n        }\n      });\n    }).catch(error => {\n      console.log(error); // for live uncomment below..........\n      // dispatch({\n      //     type: 'UPDATE_USER_TYPE',\n      //     payload: {\n      //         userType: 'unknown',\n      //         isLoggedIn: false\n      //     }\n      // })\n      //.....................................breakpoint\n      // for live comment below..........\n\n      dispatch({\n        type: 'UPDATE_USER_TYPE',\n        payload: {\n          userType: 'ADMIN',\n          isLoggedIn: true\n        }\n      }); // ........................breakpoint\n    });\n  };\n};\nexport const getAdhocRun = data => {\n  return dispatch => {\n    console.log(data, 'kokdd');\n    dispatch({\n      type: 'ADHOC_RUN_SHOW_RESULT',\n      payload: true\n    });\n    axios.post(`http://nub-db-services.infoedge.com/airflow/adhoc/query`, data, {\n      params: authenticationParam\n    }).then(res => {\n      dispatch({\n        type: 'ADHOC_RUN_RES_DATA',\n        payload: res.data\n      });\n      dispatch({\n        type: 'ADHOC_RUN_SHOW_RESULT',\n        payload: true\n      });\n      setTimeout(function () {\n        // alert(\"Sup!\");\n        dispatch({\n          type: 'ADHOC_RUN_SHOW_RESULT',\n          payload: false\n        });\n      }, 3500);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getAllEvents = () => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/home/`, {\n      params: authenticationParam\n    }).then(response => {\n      dispatch({\n        type: 'UPDATE_ALL_EVENTS',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getDbList = () => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/dbdetails/home/`, {\n      params: authenticationParam\n    }).then(response => {\n      dispatch({\n        type: 'UPDATE_DB_LIST',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getAllTables = id => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/home/`, {\n      params: authenticationParam\n    }).then(response => {\n      const map = {};\n      response.data.forEach(item => {\n        map[item.name] = item.type;\n      });\n      dispatch({\n        type: 'UPDATE_ALL_TABLES',\n        payload: map\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getSummaryTables = id => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/tenant/${id}/type/COMPUTED`, {\n      params: authenticationParam\n    }).then(response => {\n      response.data.sort((a, b) => {\n        return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n      });\n      dispatch({\n        type: 'UPDATE_COMPUTED_EVENTS',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getTransactionalTables = id => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/tenant/${id}/type/TRANSACTIONAL`, {\n      params: authenticationParam\n    }).then(response => {\n      response.data.sort((a, b) => {\n        return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n      });\n      dispatch({\n        type: 'UPDATE_TRANSACTIONAL_EVENTS',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getClickStreamTables = id => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/tenant/${id}/type/BEHAVIORAL`, {\n      params: authenticationParam\n    }).then(response => {\n      response.data.sort((a, b) => {\n        return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n      });\n      dispatch({\n        type: 'UPDATE_BEHAVIORAL_EVENTS',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getStaleSummaryTables = (id, days) => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/upto/${days}/tenant/${id}/type/COMPUTED/freshness/false`, {\n      params: authenticationParam\n    }).then(response => {\n      response.data.sort((a, b) => {\n        return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n      });\n      dispatch({\n        type: 'UPDATE_STALE_COMPUTED_EVENTS',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getStaleTransactionalTables = (id, days) => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/upto/${days}/tenant/${id}/type/TRANSACTIONAL/freshness/false`, {\n      params: authenticationParam\n    }).then(response => {\n      response.data.sort((a, b) => {\n        return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n      });\n      dispatch({\n        type: 'UPDATE_STALE_TRANSACTIONAL_EVENTS',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getStaleClickStreamTables = (id, days) => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/upto/${days}/tenant/${id}/type/BEHAVIORAL/freshness/false`, {\n      params: authenticationParam\n    }).then(response => {\n      response.data.sort((a, b) => {\n        return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n      });\n      dispatch({\n        type: 'UPDATE_STALE_BEHAVIORAL_EVENTS',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getFreshSummaryTables = (id, days) => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/upto/${days}/tenant/${id}/type/COMPUTED/freshness/true`, {\n      params: authenticationParam\n    }).then(response => {\n      response.data.sort((a, b) => {\n        return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n      });\n      dispatch({\n        type: 'UPDATE_FRESH_COMPUTED_EVENTS',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getFreshTransactionalTables = (id, days) => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/upto/${days}/tenant/${id}/type/TRANSACTIONAL/freshness/true`, {\n      params: authenticationParam\n    }).then(response => {\n      response.data.sort((a, b) => {\n        return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n      });\n      dispatch({\n        type: 'UPDATE_FRESH_TRANSACTIONAL_EVENTS',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getFreshClickStreamTables = (id, days) => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/upto/${days}/tenant/${id}/type/BEHAVIORAL/freshness/true`, {\n      params: authenticationParam\n    }).then(response => {\n      response.data.sort((a, b) => {\n        return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n      });\n      dispatch({\n        type: 'UPDATE_FRESH_BEHAVIORAL_EVENTS',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getProcessedRecords = id => {\n  return async dispatch => {\n    const response1 = axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/lowerthreshold/0/upperthreshold/1000000`, {\n      params: authenticationParam\n    });\n    const response2 = axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/lowerthreshold/1000000/upperthreshold/5000000`, {\n      params: authenticationParam\n    });\n    const response3 = axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/lowerthreshold/5000000/upperthreshold/10000000`, {\n      params: authenticationParam\n    });\n    const response4 = axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/lowerthreshold/10000000/upperthreshold/20000000`, {\n      params: authenticationParam\n    });\n    const response5 = axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/lowerthreshold/20000000/upperthreshold/50000000`, {\n      params: authenticationParam\n    });\n    const allResponse = await Promise.all([response1, response2, response3, response4, response5]);\n    const response = allResponse.map(item => {\n      return item.data;\n    });\n    dispatch({\n      type: 'UPDATE_PROCESSED_RECORDS',\n      payload: response\n    });\n  };\n};\nexport const getAirflowTime = (id, name) => {// http://10.120.0.125:8091/event/airflowaveragetime/tenant/1/name/session_summary?token=90a1e95dba0d3d9c11e3f220cc4f7879\n  // http://10.120.0.125:8091/event/airflowcurrenttime/tenant/1/name/applyView?token=90a1e95dba0d3d9c11e3f220cc4f7879\n  // http://10.120.0.125:8091/event/airflowyesterdaytime/tenant/1/name/applyView?token=90a1e95dba0d3d9c11e3f220cc4f7879\n  // return async (dispatch) => {\n  //     const response1 = axios.get(`${backEndUrl}/event/airflowaveragetime/tenant/${id}/name/${name}`, {\n  //         params: authenticationParam\n  //     })\n  //     const response2 = axios.get(`${backEndUrl}/event/airflowcurrenttime/tenant/${id}/name/${name}`, {\n  //         params: authenticationParam\n  //     })\n  //     const response3 = axios.get(`${backEndUrl}/event/airflowyesterdaytime/tenant/${id}/name/${name}`, {\n  //         params: authenticationParam\n  //     })\n  //     const allResponse = await Promise.all([response1, response2, response3])\n  //     const response = allResponse.map(item => {\n  //         return item.data\n  //     })\n  //     dispatch({\n  //         type: 'ALL_FLOW_TIME',\n  //         payload: response\n  //     })\n  // }\n}; // http://10.120.0.125:8091/loading/getalltenantsmapping?token=90a1e95dba0d3d9c11e3f220cc4f7879\n// ALL_WEBSITE\n\nexport const getWebsiteList = () => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/loading/getalltenantsmapping?token=90a1e95dba0d3d9c11e3f220cc4f7879`, {\n      params: authenticationParam\n    }).then(response => {\n      dispatch({\n        type: 'ALL_WEBSITE',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getProcessedRecordsCount = (id, name) => {\n  return dispatch => {\n    dispatch({\n      type: 'UPDATE_ACTIVE_TAB',\n      payload: 1\n    });\n    axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/name/${name}`, {\n      params: authenticationParam\n    }).then(response => {\n      dispatch({\n        type: 'UPDATE_PROCESSED_RECORDS_COUNT',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getProcessedRecordsCountForTimeWindow = (id, name, startDate, timeWindow) => {\n  return dispatch => {\n    // > ${backEndUrl}/event/processedrecords/tenant/1/name/ai_offline/startdate/2021-12-01/timeWindow/7?token=90a1e95dba0d3d9c11e3f220cc4f7879\n    // axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/name/${name}`, {\n    axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/name/${name}/startdate/${startDate}/timeWindow/${timeWindow}`, {\n      params: authenticationParam\n    }).then(res => {\n      let response = [];\n\n      for (let i in res.data) {\n        let tempValue = res.data[i].split(',');\n        console.log(tempValue);\n        response.push({\n          processedRecords: tempValue[0],\n          date: tempValue[1]\n        });\n      }\n\n      dispatch({\n        type: 'UPDATE_PROCESSED_RECORDS_COUNT',\n        payload: response\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getPersistanceTimeRecord = (id, name, day) => {\n  return dispatch => {\n    // ${backEndUrl}/event/airflowstatus/tenant/1/name/activeJobseekerView/startdate/2022-06-20/enddate/2022-06-30?token=90a1e95dba0d3d9c11e3f220cc4f7879\n    let tempStartdate;\n    let tempEnddate;\n\n    if (day == 7) {\n      tempStartdate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toLocaleDateString().split('/');\n      tempEnddate = new Date(Date.now() - 0 * 24 * 60 * 60 * 1000).toLocaleDateString().split('/');\n    } // let enddate = \"2022-06-30\"\n    // let startdate = \"2022-06-20\" \n\n\n    let f_date = tempEnddate[0];\n    let f_month = tempEnddate[1];\n    let f_year = tempEnddate[2];\n    let s_date = tempStartdate[0];\n    let s_month = tempStartdate[1];\n    let s_year = tempStartdate[2]; // let enddate = \"2022-06-30\"\n    // let startdate = \"2022-06-20\" \n\n    let enddate = `${f_year}-${f_month}-${f_date}`;\n    let startdate = `${s_year}-${s_month}-${s_date}`;\n    console.log(startdate, 'startdate');\n    axios.get(`${backEndUrl}/event/airflowstatus/tenant/${id}/name/${name}/startdate/${startdate}/enddate/${enddate}/`, {\n      params: authenticationParam\n    }).then(res => {\n      let response = res.data;\n      let result = [];\n\n      for (let i in response) {\n        let temp = response[i].split(\" \");\n        temp[1] = temp[1].slice(0, 5).replace(':', '.');\n        result.push(temp);\n      }\n\n      dispatch({\n        type: 'UPDATE_PERSISTANCE_RECORDS',\n        payload: result\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getPersistanceTimeRecordWithTimeWindow = (id, name, startDate, timeWindow) => {\n  return dispatch => {\n    // ${backEndUrl}/event/airflowstatus/tenant/1/name/activeJobseekerView/startdate/2022-06-20/enddate/2022-06-30?token=90a1e95dba0d3d9c11e3f220cc4f7879\n    let tempStartdate;\n    let tempEnddate; // var myDate = \"26-02-2012\";\n\n    let myDate = startDate.split(\"-\");\n    var newDate = new Date(myDate[0], myDate[1] - 1, myDate[2]);\n    tempStartdate = new Date(newDate.getTime() - 0 * 24 * 60 * 60 * 1000).toLocaleDateString().split('/');\n    ;\n    tempEnddate = new Date(newDate.getTime() + timeWindow * 24 * 60 * 60 * 1000).toLocaleDateString().split('/');\n    ;\n    let f_date = tempEnddate[0];\n    let f_month = tempEnddate[1];\n    let f_year = tempEnddate[2];\n    let s_date = tempStartdate[0];\n    let s_month = tempStartdate[1];\n    let s_year = tempStartdate[2]; // let enddate = \"2022-06-30\"\n    // let startdate = \"2022-06-20\" \n\n    let enddate = `${f_year}-${f_month}-${f_date}`;\n    let startdate = `${s_year}-${s_month}-${s_date}`;\n    axios.get(`${backEndUrl}/event/airflowstatus/tenant/${id}/name/${name}/startdate/${startdate}/enddate/${enddate}/`, {\n      params: authenticationParam\n    }).then(res => {\n      let response = res.data;\n      let result = [];\n\n      for (let i in response) {\n        let temp = response[i].split(\" \");\n        temp[1] = temp[1].slice(0, 5).replace(':', '.');\n        result.push(temp);\n      }\n\n      dispatch({\n        type: 'UPDATE_PERSISTANCE_RECORDS',\n        payload: result\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getSqoopData = (id, name) => {\n  return dispatch => {\n    http: //catalogapi.infoedge.com/event/sqoopValidator/name/PUBLIC/tenantId/1?token=90a1e95dba0d3d9c11e3f220cc4f7879 - for sqoop\n    axios.get(`http://catalogapi.infoedge.com/event/sqoopValidator/name/${name}/tenantId/${id}`, {\n      params: authenticationParam\n    }).then(response => {\n      dispatch({\n        type: 'UPDATE_SQOOP_DATA_COUNT',\n        payload: response.data\n      });\n      dispatch({\n        type: 'UPDATE_MAXWELL_DATA_COUNT',\n        payload: []\n      });\n      dispatch({\n        type: 'UPDATE_MONGO_DATA_COUNT',\n        payload: []\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getSqoopDataWithTimeWindow = (id, name, startdate, timeWindow) => {\n  return dispatch => {\n    http: //catalogapi.infoedge.com/event/sqoopValidator/name/PUBLIC/tenantId/1?token=90a1e95dba0d3d9c11e3f220cc4f7879 - for sqoop\n    // ${backEndUrl}/event/sqoopValidator/name/ai_offline/tenantId/1/startdate/2021-12-01/timeWindow/1?token=90a1e95dba0d3d9c11e3f220cc4f7879\n    // axios.get(`http://catalogapi.infoedge.com/event/sqoopValidator/name/${name}/tenantId/${id}`, {\n    axios.get(`${backEndUrl}/event/sqoopValidator/name/${name}/tenantId/${id}/startdate/${startdate}/timeWindow/${timeWindow}`, {\n      params: authenticationParam\n    }).then(response => {\n      dispatch({\n        type: 'UPDATE_SQOOP_DATA_COUNT',\n        payload: response.data\n      });\n      dispatch({\n        type: 'UPDATE_MAXWELL_DATA_COUNT',\n        payload: []\n      });\n      dispatch({\n        type: 'UPDATE_MONGO_DATA_COUNT',\n        payload: []\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getMaxwellData = (id, name) => {\n  let response = [];\n  return dispatch => {\n    http: //catalogapi.infoedge.com/event/maxwellValidator/name/callIntent/tenantId/1?token=90a1e95dba0d3d9c11e3f220cc4f7879 - for maxwell\n    axios.get(`http://catalogapi.infoedge.com/event/maxwellValidator/name/${name}/tenantId/${id}`, {\n      params: authenticationParam\n    }).then(response => {\n      dispatch({\n        type: 'UPDATE_MAXWELL_DATA_COUNT',\n        payload: response.data\n      });\n      dispatch({\n        type: 'UPDATE_SQOOP_DATA_COUNT',\n        payload: []\n      });\n      dispatch({\n        type: 'UPDATE_MONGO_DATA_COUNT',\n        payload: []\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getMaxwellDataWithTimwWindow = (id, name, startdate, timeWindow) => {\n  let response = [];\n  return dispatch => {\n    // http://catalogapi.infoedge.com/event/maxwellValidator/name/callIntent/tenantId/1?token=90a1e95dba0d3d9c11e3f220cc4f7879 - for maxwell\n    // ${backEndUrl}/event/maxwellValidator/name/callIntent/tenantId/1/startdate/2022-07-01/timeWindow/15?token=90a1e95dba0d3d9c11e3f220cc4f7879\n    axios.get(`${backEndUrl}/event/maxwellValidator/name/${name}/tenantId/${id}/startdate/${startdate}/timeWindow/${timeWindow}`, {\n      // axios.get(`http://catalogapi.infoedge.com/event/maxwellValidator/name/${name}/tenantId/${id}`, {\n      params: authenticationParam\n    }).then(response => {\n      dispatch({\n        type: 'UPDATE_MAXWELL_DATA_COUNT',\n        payload: response.data\n      });\n      dispatch({\n        type: 'UPDATE_SQOOP_DATA_COUNT',\n        payload: []\n      });\n      dispatch({\n        type: 'UPDATE_MONGO_DATA_COUNT',\n        payload: []\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getMongoData = (id, name) => {\n  return dispatch => {\n    axios.get(`http://catalogapi.infoedge.com/event/mongoValidator/name/${name}/tenantId/${id}`, {\n      params: authenticationParam\n    }).then(response => {\n      dispatch({\n        type: 'UPDATE_MONGO_DATA_COUNT',\n        payload: response.data\n      });\n      dispatch({\n        type: 'UPDATE_SQOOP_DATA_COUNT',\n        payload: []\n      });\n      dispatch({\n        type: 'UPDATE_MAXWELL_DATA_COUNT',\n        payload: []\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getMongoDataWithTimeWindow = (id, name, startdate, timeWindow) => {\n  let response = {};\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/mongoValidator/name/${name}/tenantId/${id}/startdate/${startdate}/timeWindow/${timeWindow}`, {\n      params: authenticationParam\n    }).then(response => {\n      console.log(response, 'maxwell');\n      dispatch({\n        type: 'UPDATE_MONGO_DATA_COUNT',\n        payload: response.data\n      });\n      dispatch({\n        type: 'UPDATE_SQOOP_DATA_COUNT',\n        payload: []\n      });\n      dispatch({\n        type: 'UPDATE_MAXWELL_DATA_COUNT',\n        payload: []\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getSelectedEventMeta = (id, name) => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/event/tenant/${id}/name/${name}`, {\n      params: authenticationParam\n    }).then(response => {\n      const dbId = response.data[0].dbConnectionId;\n\n      if (dbId) {\n        axios.get(`${backEndUrl}/dbdetails/connectionId/${dbId}`, {\n          params: authenticationParam\n        }).then(res => {\n          const dbName = res.data[0].dbName;\n          const dbInstance = res.data[0].dbInstance;\n          response.data[0].NewDbName = dbName;\n          response.data[0].NewDbInstance = dbInstance;\n          dispatch({\n            type: 'UPDATE_SELECTED_EVENT_META',\n            payload: response.data\n          });\n        });\n      } else {\n        dispatch({\n          type: 'UPDATE_SELECTED_EVENT_META',\n          payload: response.data\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const getSelectedFields = (id, name) => {\n  return dispatch => {\n    axios.get(`${backEndUrl}/eventfield/tenant/${id}/name/${name}`, {\n      params: authenticationParam\n    }).then(response => {\n      dispatch({\n        type: 'UPDATE_SELECTED_FIELDS',\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const putEvent = putBody => {\n  return dispatch => {\n    axios.put(`${backEndUrl}/event/`, putBody, {\n      params: authenticationParam\n    }).then(response => {\n      if (response.status === 201) {\n        const dbId = response.data.dbConnectionId;\n\n        if (dbId) {\n          axios.get(`${backEndUrl}/dbdetails/connectionId/${dbId}`, {\n            params: authenticationParam\n          }).then(res => {\n            const dbName = res.data[0].dbName;\n            const dbInstance = res.data[0].dbInstance;\n            response.data.NewDbName = dbName;\n            response.data.NewDbInstance = dbInstance;\n            dispatch({\n              type: 'UPDATE_SELECTED_EVENT_META',\n              payload: [response.data]\n            });\n          });\n        } else {\n          dispatch({\n            type: \"UPDATE_SELECTED_EVENT_META\",\n            payload: [putBody]\n          });\n        }\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const putFields = putBody => {\n  return dispatch => {\n    axios.put(`${backEndUrl}/eventfield/`, putBody, {\n      params: authenticationParam\n    }).then(response => {\n      if (response.status === 201) {\n        dispatch({\n          type: \"UPDATE_SELECTED_FIELDS\",\n          payload: [putBody]\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};","map":{"version":3,"names":["authenticationUrl","authenticationParam","backEndUrl","axios","require","updateTenant","id","type","payload","updateName","name","getUpdateActiveTab","tab","dispatch","updateHighlightedName","getUserType","get","params","then","response","userType","data","isLoggedIn","catch","error","console","log","getAdhocRun","post","res","setTimeout","getAllEvents","getDbList","getAllTables","map","forEach","item","getSummaryTables","sort","a","b","toLowerCase","getTransactionalTables","getClickStreamTables","getStaleSummaryTables","days","getStaleTransactionalTables","getStaleClickStreamTables","getFreshSummaryTables","getFreshTransactionalTables","getFreshClickStreamTables","getProcessedRecords","response1","response2","response3","response4","response5","allResponse","Promise","all","getAirflowTime","getWebsiteList","getProcessedRecordsCount","getProcessedRecordsCountForTimeWindow","startDate","timeWindow","i","tempValue","split","push","processedRecords","date","getPersistanceTimeRecord","day","tempStartdate","tempEnddate","Date","now","toLocaleDateString","f_date","f_month","f_year","s_date","s_month","s_year","enddate","startdate","result","temp","slice","replace","getPersistanceTimeRecordWithTimeWindow","myDate","newDate","getTime","getSqoopData","http","getSqoopDataWithTimeWindow","getMaxwellData","getMaxwellDataWithTimwWindow","getMongoData","getMongoDataWithTimeWindow","getSelectedEventMeta","dbId","dbConnectionId","dbName","dbInstance","NewDbName","NewDbInstance","getSelectedFields","putEvent","putBody","put","status","putFields"],"sources":["/home/tarun/learning/myOwnProject/nodejs-express-mongodb/frontend/location/src/actions/dataActions.js"],"sourcesContent":["import {\n    authenticationUrl,\n    authenticationParam,\n    backEndUrl\n} from \"../config\"\n\nconst axios=require('axios')\n\nexport const updateTenant=(id) => {\n    return {\n        type: 'UPDATE_SELECTED_TENANT',\n        payload: id\n    }\n}\n\nexport const updateName=(name) => {\n    return {\n        type: 'UPDATE_SELECTED_EVENT',\n        payload: name\n    }\n}\nexport const getUpdateActiveTab=(tab) => {\n    return (dispatch) => {\n        dispatch({\n            type: 'UPDATE_ACTIVE_TAB',\n            payload: tab\n        })\n    }\n}\n\n\nexport const updateHighlightedName=(name) => {\n    return {\n        type: 'UPDATE_HIGHLIGHTED_EVENT',\n        payload: name\n    }\n}\n\n\n\nexport const getUserType=() => {\n    return (dispatch) => {\n        // fetch(authenticationUrl,\n        //     {\n        //         method: 'GET',\n        //         credentials: 'include',\n        //         params: authenticationParam,\n\n        //         headers: {\n        //             'Accept': 'application/json',\n        //             // 'Accept': '*',\n\n        //             'Content-Type': 'application/json',\n        //             \"Access-Control-Allow-Methods\": \"GET,HEAD,OPTIONS,POST,PUT\",\n        //             'Access-Control-Allow-Origin': 'http://datalake.infoedge.com',\n        //             \"Access-Control-Allow-Credentials\": \"true\",\n        //             \"Access-Control-Allow-Headers\": \"Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers\"\n        //         }\n        //     }\n        // )\n        axios.get(authenticationUrl,{\n            params: authenticationParam,\n            // credentials: 'true',\n            // withCredentials: false,\n\n            // headers:{\n            //     'Accept': 'application/json',\n            //     'Content-Type': 'application/json',\n\n            // }\n        })\n            .then(response => {\n                dispatch({\n                    type: 'UPDATE_USER_TYPE',\n                    payload: {\n                        userType: response.data.userType,\n                        isLoggedIn: true\n                    }\n                })\n            })\n            .catch(error => {\n                console.log(error);\n                // for live uncomment below..........\n\n                // dispatch({\n                //     type: 'UPDATE_USER_TYPE',\n                //     payload: {\n                //         userType: 'unknown',\n                //         isLoggedIn: false\n                //     }\n                // })\n\n                //.....................................breakpoint\n                // for live comment below..........\n\n                dispatch({\n                    type: 'UPDATE_USER_TYPE',\n                    payload: {\n                        userType: 'ADMIN',\n                        isLoggedIn: true\n                    }\n                })\n\n                // ........................breakpoint\n            })\n    }\n}\n\n\nexport const getAdhocRun=(data) => {\n    return (dispatch) => {\n        console.log(data,'kokdd');\n        dispatch({\n            type: 'ADHOC_RUN_SHOW_RESULT',\n            payload: true,\n        })\n        axios.post(`http://nub-db-services.infoedge.com/airflow/adhoc/query`,data,{\n            params: authenticationParam\n        })\n            .then(res => {\n                dispatch({\n                    type: 'ADHOC_RUN_RES_DATA',\n                    payload: res.data,\n                })\n                dispatch({\n                    type: 'ADHOC_RUN_SHOW_RESULT',\n                    payload: true,\n                })\n\n                setTimeout(function() {\n                    // alert(\"Sup!\");\n                    dispatch({\n                        type: 'ADHOC_RUN_SHOW_RESULT',\n                        payload: false,\n                    })\n                },3500);\n            })\n            .catch(error => {\n                console.log(error);\n            })\n\n    }\n}\n\n\nexport const getAllEvents=() => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/home/`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                dispatch({\n                    type: 'UPDATE_ALL_EVENTS',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getDbList=() => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/dbdetails/home/`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                dispatch({\n                    type: 'UPDATE_DB_LIST',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getAllTables=(id) => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/home/`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                const map={}\n                response.data.forEach(item => {\n                    map[item.name]=item.type\n                })\n                dispatch({\n                    type: 'UPDATE_ALL_TABLES',\n                    payload: map\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n\n}\n\nexport const getSummaryTables=(id) => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/tenant/${id}/type/COMPUTED`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                response.data.sort((a,b) => {\n                    return (a.name.toLowerCase()>b.name.toLowerCase()? 1:-1)\n                })\n                dispatch({\n                    type: 'UPDATE_COMPUTED_EVENTS',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n\n}\n\nexport const getTransactionalTables=(id) => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/tenant/${id}/type/TRANSACTIONAL`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                response.data.sort((a,b) => {\n                    return (a.name.toLowerCase()>b.name.toLowerCase()? 1:-1)\n                })\n                dispatch({\n                    type: 'UPDATE_TRANSACTIONAL_EVENTS',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getClickStreamTables=(id) => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/tenant/${id}/type/BEHAVIORAL`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                response.data.sort((a,b) => {\n                    return (a.name.toLowerCase()>b.name.toLowerCase()? 1:-1)\n                })\n                dispatch({\n                    type: 'UPDATE_BEHAVIORAL_EVENTS',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getStaleSummaryTables=(id,days) => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/upto/${days}/tenant/${id}/type/COMPUTED/freshness/false`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                response.data.sort((a,b) => {\n                    return (a.name.toLowerCase()>b.name.toLowerCase()? 1:-1)\n                })\n                dispatch({\n                    type: 'UPDATE_STALE_COMPUTED_EVENTS',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getStaleTransactionalTables=(id,days) => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/upto/${days}/tenant/${id}/type/TRANSACTIONAL/freshness/false`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                response.data.sort((a,b) => {\n                    return (a.name.toLowerCase()>b.name.toLowerCase()? 1:-1)\n                })\n                dispatch({\n                    type: 'UPDATE_STALE_TRANSACTIONAL_EVENTS',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getStaleClickStreamTables=(id,days) => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/upto/${days}/tenant/${id}/type/BEHAVIORAL/freshness/false`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                response.data.sort((a,b) => {\n                    return (a.name.toLowerCase()>b.name.toLowerCase()? 1:-1)\n                })\n                dispatch({\n                    type: 'UPDATE_STALE_BEHAVIORAL_EVENTS',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getFreshSummaryTables=(id,days) => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/upto/${days}/tenant/${id}/type/COMPUTED/freshness/true`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                response.data.sort((a,b) => {\n                    return (a.name.toLowerCase()>b.name.toLowerCase()? 1:-1)\n                })\n                dispatch({\n                    type: 'UPDATE_FRESH_COMPUTED_EVENTS',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getFreshTransactionalTables=(id,days) => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/upto/${days}/tenant/${id}/type/TRANSACTIONAL/freshness/true`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                response.data.sort((a,b) => {\n                    return (a.name.toLowerCase()>b.name.toLowerCase()? 1:-1)\n                })\n                dispatch({\n                    type: 'UPDATE_FRESH_TRANSACTIONAL_EVENTS',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getFreshClickStreamTables=(id,days) => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/upto/${days}/tenant/${id}/type/BEHAVIORAL/freshness/true`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                response.data.sort((a,b) => {\n                    return (a.name.toLowerCase()>b.name.toLowerCase()? 1:-1)\n                })\n                dispatch({\n                    type: 'UPDATE_FRESH_BEHAVIORAL_EVENTS',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getProcessedRecords=(id) => {\n    return async (dispatch) => {\n        const response1=axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/lowerthreshold/0/upperthreshold/1000000`,{\n            params: authenticationParam\n        })\n        const response2=axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/lowerthreshold/1000000/upperthreshold/5000000`,{\n            params: authenticationParam\n        })\n        const response3=axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/lowerthreshold/5000000/upperthreshold/10000000`,{\n            params: authenticationParam\n        })\n        const response4=axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/lowerthreshold/10000000/upperthreshold/20000000`,{\n            params: authenticationParam\n        })\n        const response5=axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/lowerthreshold/20000000/upperthreshold/50000000`,{\n            params: authenticationParam\n        })\n        const allResponse=await Promise.all([response1,response2,response3,response4,response5])\n        const response=allResponse.map(item => {\n            return item.data\n        })\n\n        dispatch({\n            type: 'UPDATE_PROCESSED_RECORDS',\n            payload: response\n        })\n    }\n}\nexport const getAirflowTime=(id,name) => {\n\n    // http://10.120.0.125:8091/event/airflowaveragetime/tenant/1/name/session_summary?token=90a1e95dba0d3d9c11e3f220cc4f7879\n    // http://10.120.0.125:8091/event/airflowcurrenttime/tenant/1/name/applyView?token=90a1e95dba0d3d9c11e3f220cc4f7879\n    // http://10.120.0.125:8091/event/airflowyesterdaytime/tenant/1/name/applyView?token=90a1e95dba0d3d9c11e3f220cc4f7879\n    // return async (dispatch) => {\n    //     const response1 = axios.get(`${backEndUrl}/event/airflowaveragetime/tenant/${id}/name/${name}`, {\n    //         params: authenticationParam\n    //     })\n    //     const response2 = axios.get(`${backEndUrl}/event/airflowcurrenttime/tenant/${id}/name/${name}`, {\n    //         params: authenticationParam\n    //     })\n    //     const response3 = axios.get(`${backEndUrl}/event/airflowyesterdaytime/tenant/${id}/name/${name}`, {\n    //         params: authenticationParam\n    //     })\n\n    //     const allResponse = await Promise.all([response1, response2, response3])\n    //     const response = allResponse.map(item => {\n    //         return item.data\n    //     })\n\n    //     dispatch({\n    //         type: 'ALL_FLOW_TIME',\n    //         payload: response\n    //     })\n    // }\n}\n\n// http://10.120.0.125:8091/loading/getalltenantsmapping?token=90a1e95dba0d3d9c11e3f220cc4f7879\n\n// ALL_WEBSITE\n\nexport const getWebsiteList=() => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/loading/getalltenantsmapping?token=90a1e95dba0d3d9c11e3f220cc4f7879`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                dispatch({\n                    type: 'ALL_WEBSITE',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getProcessedRecordsCount=(id,name) => {\n    return (dispatch) => {\n        dispatch({\n            type: 'UPDATE_ACTIVE_TAB',\n            payload: 1\n        })\n        axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/name/${name}`,{\n            params: authenticationParam\n        })\n            .then(response => {\n\n                dispatch({\n                    type: 'UPDATE_PROCESSED_RECORDS_COUNT',\n                    payload: response.data\n                })\n\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\nexport const getProcessedRecordsCountForTimeWindow=(id,name,startDate,timeWindow) => {\n    return (dispatch) => {\n        // > ${backEndUrl}/event/processedrecords/tenant/1/name/ai_offline/startdate/2021-12-01/timeWindow/7?token=90a1e95dba0d3d9c11e3f220cc4f7879\n        // axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/name/${name}`, {\n        axios.get(`${backEndUrl}/event/processedrecords/tenant/${id}/name/${name}/startdate/${startDate}/timeWindow/${timeWindow}`,{\n\n            params: authenticationParam\n        })\n            .then(res => {\n                let response=[]\n                for(let i in res.data) {\n                    let tempValue=res.data[i].split(',')\n                    console.log(tempValue);\n                    response.push({\n                        processedRecords: tempValue[0],\n                        date: tempValue[1],\n                    })\n\n                }\n\n                dispatch({\n                    type: 'UPDATE_PROCESSED_RECORDS_COUNT',\n                    payload: response\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\nexport const getPersistanceTimeRecord=(id,name,day) => {\n    return (dispatch) => {\n        // ${backEndUrl}/event/airflowstatus/tenant/1/name/activeJobseekerView/startdate/2022-06-20/enddate/2022-06-30?token=90a1e95dba0d3d9c11e3f220cc4f7879\n        let tempStartdate\n        let tempEnddate\n\n        if(day==7) {\n            tempStartdate=new Date(Date.now()-7*24*60*60*1000).toLocaleDateString().split('/');\n            tempEnddate=new Date(Date.now()-0*24*60*60*1000).toLocaleDateString().split('/');\n        }\n\n        // let enddate = \"2022-06-30\"\n        // let startdate = \"2022-06-20\" \n        let f_date=tempEnddate[0]\n        let f_month=tempEnddate[1]\n        let f_year=tempEnddate[2]\n\n        let s_date=tempStartdate[0]\n        let s_month=tempStartdate[1]\n        let s_year=tempStartdate[2]\n        // let enddate = \"2022-06-30\"\n        // let startdate = \"2022-06-20\" \n\n        let enddate=`${f_year}-${f_month}-${f_date}`\n        let startdate=`${s_year}-${s_month}-${s_date}`\n\n        console.log(startdate,'startdate');\n\n        axios.get(`${backEndUrl}/event/airflowstatus/tenant/${id}/name/${name}/startdate/${startdate}/enddate/${enddate}/`,{\n            params: authenticationParam\n        })\n            .then(res => {\n\n                let response=res.data\n                let result=[]\n                for(let i in response) {\n                    let temp=response[i].split(\" \")\n                    temp[1]=temp[1].slice(0,5).replace(':','.')\n                    result.push(temp)\n\n                }\n\n                dispatch({\n                    type: 'UPDATE_PERSISTANCE_RECORDS',\n                    payload: result\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\nexport const getPersistanceTimeRecordWithTimeWindow=(id,name,startDate,timeWindow) => {\n    return (dispatch) => {\n        // ${backEndUrl}/event/airflowstatus/tenant/1/name/activeJobseekerView/startdate/2022-06-20/enddate/2022-06-30?token=90a1e95dba0d3d9c11e3f220cc4f7879\n        let tempStartdate\n        let tempEnddate\n\n        // var myDate = \"26-02-2012\";\n        let myDate=startDate.split(\"-\");\n        var newDate=new Date(myDate[0],myDate[1]-1,myDate[2]);\n        tempStartdate=new Date(newDate.getTime()-0*24*60*60*1000).toLocaleDateString().split('/');;\n        tempEnddate=new Date(newDate.getTime()+(timeWindow)*24*60*60*1000).toLocaleDateString().split('/');;\n\n        let f_date=tempEnddate[0]\n        let f_month=tempEnddate[1]\n        let f_year=tempEnddate[2]\n\n        let s_date=tempStartdate[0]\n        let s_month=tempStartdate[1]\n        let s_year=tempStartdate[2]\n\n        // let enddate = \"2022-06-30\"\n        // let startdate = \"2022-06-20\" \n\n        let enddate=`${f_year}-${f_month}-${f_date}`\n        let startdate=`${s_year}-${s_month}-${s_date}`\n\n\n        axios.get(`${backEndUrl}/event/airflowstatus/tenant/${id}/name/${name}/startdate/${startdate}/enddate/${enddate}/`,{\n            params: authenticationParam\n        })\n            .then(res => {\n                let response=res.data\n                let result=[]\n                for(let i in response) {\n                    let temp=response[i].split(\" \")\n                    temp[1]=temp[1].slice(0,5).replace(':','.')\n                    result.push(temp)\n\n                }\n                dispatch({\n                    type: 'UPDATE_PERSISTANCE_RECORDS',\n                    payload: result\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\nexport const getSqoopData=(id,name) => {\n    return (dispatch) => {\n\n        http://catalogapi.infoedge.com/event/sqoopValidator/name/PUBLIC/tenantId/1?token=90a1e95dba0d3d9c11e3f220cc4f7879 - for sqoop\n        axios.get(`http://catalogapi.infoedge.com/event/sqoopValidator/name/${name}/tenantId/${id}`,{\n            params: authenticationParam\n        })\n            .then(response => {\n\n                dispatch({\n                    type: 'UPDATE_SQOOP_DATA_COUNT',\n                    payload: response.data\n                })\n                dispatch({\n                    type: 'UPDATE_MAXWELL_DATA_COUNT',\n                    payload: []\n                })\n                dispatch({\n                    type: 'UPDATE_MONGO_DATA_COUNT',\n                    payload: []\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\nexport const getSqoopDataWithTimeWindow=(id,name,startdate,timeWindow) => {\n    return (dispatch) => {\n\n        http://catalogapi.infoedge.com/event/sqoopValidator/name/PUBLIC/tenantId/1?token=90a1e95dba0d3d9c11e3f220cc4f7879 - for sqoop\n\n        // ${backEndUrl}/event/sqoopValidator/name/ai_offline/tenantId/1/startdate/2021-12-01/timeWindow/1?token=90a1e95dba0d3d9c11e3f220cc4f7879\n\n        // axios.get(`http://catalogapi.infoedge.com/event/sqoopValidator/name/${name}/tenantId/${id}`, {\n        axios.get(`${backEndUrl}/event/sqoopValidator/name/${name}/tenantId/${id}/startdate/${startdate}/timeWindow/${timeWindow}`,{\n\n            params: authenticationParam\n        })\n            .then(response => {\n\n                dispatch({\n                    type: 'UPDATE_SQOOP_DATA_COUNT',\n                    payload: response.data\n                })\n                dispatch({\n                    type: 'UPDATE_MAXWELL_DATA_COUNT',\n                    payload: []\n                })\n                dispatch({\n                    type: 'UPDATE_MONGO_DATA_COUNT',\n                    payload: []\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\nexport const getMaxwellData=(id,name) => {\n    let response=[]\n    return (dispatch) => {\n\n        http://catalogapi.infoedge.com/event/maxwellValidator/name/callIntent/tenantId/1?token=90a1e95dba0d3d9c11e3f220cc4f7879 - for maxwell\n\n        axios.get(`http://catalogapi.infoedge.com/event/maxwellValidator/name/${name}/tenantId/${id}`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                dispatch({\n                    type: 'UPDATE_MAXWELL_DATA_COUNT',\n                    payload: response.data\n                })\n                dispatch({\n                    type: 'UPDATE_SQOOP_DATA_COUNT',\n                    payload: []\n                })\n                dispatch({\n                    type: 'UPDATE_MONGO_DATA_COUNT',\n                    payload: []\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n\n    }\n}\nexport const getMaxwellDataWithTimwWindow=(id,name,startdate,timeWindow) => {\n    let response=[]\n    return (dispatch) => {\n\n        // http://catalogapi.infoedge.com/event/maxwellValidator/name/callIntent/tenantId/1?token=90a1e95dba0d3d9c11e3f220cc4f7879 - for maxwell\n        // ${backEndUrl}/event/maxwellValidator/name/callIntent/tenantId/1/startdate/2022-07-01/timeWindow/15?token=90a1e95dba0d3d9c11e3f220cc4f7879\n        axios.get(`${backEndUrl}/event/maxwellValidator/name/${name}/tenantId/${id}/startdate/${startdate}/timeWindow/${timeWindow}`,{\n\n            // axios.get(`http://catalogapi.infoedge.com/event/maxwellValidator/name/${name}/tenantId/${id}`, {\n            params: authenticationParam\n        })\n            .then(response => {\n                dispatch({\n                    type: 'UPDATE_MAXWELL_DATA_COUNT',\n                    payload: response.data\n                })\n                dispatch({\n                    type: 'UPDATE_SQOOP_DATA_COUNT',\n                    payload: []\n                })\n                dispatch({\n                    type: 'UPDATE_MONGO_DATA_COUNT',\n                    payload: []\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n\n    }\n}\nexport const getMongoData=(id,name) => {\n    return (dispatch) => {\n        axios.get(`http://catalogapi.infoedge.com/event/mongoValidator/name/${name}/tenantId/${id}`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                dispatch({\n                    type: 'UPDATE_MONGO_DATA_COUNT',\n                    payload: response.data\n                })\n                dispatch({\n                    type: 'UPDATE_SQOOP_DATA_COUNT',\n                    payload: []\n                })\n                dispatch({\n                    type: 'UPDATE_MAXWELL_DATA_COUNT',\n                    payload: []\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\nexport const getMongoDataWithTimeWindow=(id,name,startdate,timeWindow) => {\n    let response={}\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/mongoValidator/name/${name}/tenantId/${id}/startdate/${startdate}/timeWindow/${timeWindow}`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                console.log(response,'maxwell')\n\n                dispatch({\n                    type: 'UPDATE_MONGO_DATA_COUNT',\n                    payload: response.data\n                })\n                dispatch({\n                    type: 'UPDATE_SQOOP_DATA_COUNT',\n                    payload: []\n                })\n                dispatch({\n                    type: 'UPDATE_MAXWELL_DATA_COUNT',\n                    payload: []\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getSelectedEventMeta=(id,name) => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/event/tenant/${id}/name/${name}`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                const dbId=response.data[0].dbConnectionId\n                if(dbId) {\n                    axios.get(`${backEndUrl}/dbdetails/connectionId/${dbId}`,{\n                        params: authenticationParam\n                    })\n                        .then((res) => {\n                            const dbName=res.data[0].dbName\n                            const dbInstance=res.data[0].dbInstance\n                            response.data[0].NewDbName=dbName\n                            response.data[0].NewDbInstance=dbInstance\n                            dispatch({\n                                type: 'UPDATE_SELECTED_EVENT_META',\n                                payload: response.data\n                            })\n                        })\n                } else {\n                    dispatch({\n                        type: 'UPDATE_SELECTED_EVENT_META',\n                        payload: response.data\n                    })\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const getSelectedFields=(id,name) => {\n    return (dispatch) => {\n        axios.get(`${backEndUrl}/eventfield/tenant/${id}/name/${name}`,{\n            params: authenticationParam\n        })\n            .then(response => {\n                dispatch({\n                    type: 'UPDATE_SELECTED_FIELDS',\n                    payload: response.data\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\n\n\nexport const putEvent=(putBody) => {\n    return (dispatch) => {\n        axios.put(`${backEndUrl}/event/`,putBody,{\n            params: authenticationParam\n        })\n            .then(response => {\n                if(response.status===201) {\n                    const dbId=response.data.dbConnectionId\n                    if(dbId) {\n                        axios.get(`${backEndUrl}/dbdetails/connectionId/${dbId}`,{\n                            params: authenticationParam\n                        })\n                            .then((res) => {\n                                const dbName=res.data[0].dbName\n                                const dbInstance=res.data[0].dbInstance\n                                response.data.NewDbName=dbName\n                                response.data.NewDbInstance=dbInstance\n                                dispatch({\n                                    type: 'UPDATE_SELECTED_EVENT_META',\n                                    payload: [response.data]\n                                })\n                            })\n\n                    } else {\n                        dispatch({\n                            type: \"UPDATE_SELECTED_EVENT_META\",\n                            payload: [putBody]\n                        })\n                    }\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}\n\nexport const putFields=(putBody) => {\n    return (dispatch) => {\n        axios.put(`${backEndUrl}/eventfield/`,putBody,{\n            params: authenticationParam\n        })\n            .then(response => {\n                if(response.status===201) {\n                    dispatch({\n                        type: \"UPDATE_SELECTED_FIELDS\",\n                        payload: [putBody]\n                    })\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}