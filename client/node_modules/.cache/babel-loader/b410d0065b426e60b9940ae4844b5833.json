{"ast":null,"code":"// import {\n//     authenticationUrl,\n//     authenticationParam,\n//     backEndUrl,\n//     backEndUrlSSIP\n// } from \"../config\"\nconst axios = require('axios'); // export const getEditJsonData=(data) => {\n//     return (dispatch) => {\n//         dispatch({\n//             type: 'UPDATE_INPUT_DATA',\n//             payload: data\n//         })\n//     }\n// }\n// export const getUpdatingSchemaData=(data) => {\n//     return (dispatch) => {\n//         dispatch({\n//             type: 'GETTING_SCHEMA_UPDATING_FIELD_RESPONSE',\n//             payload: data\n//         })\n//     }\n// }\n// export const getUpdatingSchemaDataOne=(data) => {\n//     return (dispatch) => {\n//         dispatch({\n//             type: 'GETTING_SCHEMA_UPDATING_FIELD_RESPONSE_ONE',\n//             payload: data\n//         })\n//     }\n// }\n// export const getUpdatingSchemaDataTwo=(data) => {\n//     return (dispatch) => {\n//         dispatch({\n//             type: 'GETTING_SCHEMA_UPDATING_FIELD_RESPONSE_TWO',\n//             payload: data\n//         })\n//     }\n// }\n// export const getUpdatingSchema=(fieldData) => {\n//     return (dispatch) => {\n//         // dispatch({\n//         //     type: 'GETTING_SCHEMA_UPDATING_META_RESPONSE',\n//         //     payload: metaData,\n//         // })\n//         dispatch({\n//             type: 'GETTING_SCHEMA_UPDATING_ONLY_SHOWING_RESPONSE',\n//             payload: fieldData,\n//         })\n//     }\n// }\n\n\nexport const getState = data => {\n  return dispatch => {\n    dispatch({\n      type: 'GETTING_STATE',\n      payload: data\n    });\n  };\n};\nexport const getCreatedNewEntity = data => {\n  console.log(data, 'response');\n  return dispatch => {\n    axios.post(`http://localhost:8080/api/tutorials`, data).then(response => {\n      // let address={}\n      // let state=[]\n      // let array=response.data\n      // for(let i=0; i<array.length; i++) {\n      //     // address[array[i].location]=array[i].state\n      //     address[array[i].state]=array[i].location\n      //     state.push({'label': array[i].state,'value': array[i].state})\n      // }\n      // console.log(state,'state',address,'address');\n      dispatch({\n        type: 'GETTING_CREATED_RESPONSE',\n        payload: response.data\n      }); // dispatch({\n      //     type: 'GETTING_STATE',\n      //     payload: state\n      // })\n      // dispatch({\n      //     type: 'GETTING_ADDRESS',\n      //     payload: address\n      // })\n    }).catch(error => {\n      let showError = error.toString();\n    });\n  };\n};\nexport const getPostingData = () => {\n  return dispatch => {\n    axios.get(`http://localhost:8080/api/tutorials`, {// params: authenticationParam\n    }).then(response => {\n      let address = {};\n      let state = [];\n      let array = response.data;\n\n      for (let i = 0; i < array.length; i++) {\n        // address[array[i].location]=array[i].state\n        address[array[i].state] = array[i].location;\n        state.push({\n          'label': array[i].state,\n          'value': array[i].state\n        });\n      } // console.log(state,'state',address,'address');\n\n\n      dispatch({\n        type: 'GETTING_LOCATION_RESPONSE',\n        payload: response.data\n      });\n      dispatch({\n        type: 'GETTING_STATE',\n        payload: state\n      });\n      dispatch({\n        type: 'GETTING_ADDRESS',\n        payload: address\n      });\n    }).catch(error => {\n      let showError = error.toString();\n    });\n  };\n};","map":{"version":3,"names":["axios","require","getState","data","dispatch","type","payload","getCreatedNewEntity","console","log","post","then","response","catch","error","showError","toString","getPostingData","get","address","state","array","i","length","location","push"],"sources":["/home/tarun/learning/myOwnProject/nodejs-express-mongodb/frontend/location/src/actions/dataActions.js"],"sourcesContent":["// import {\n//     authenticationUrl,\n//     authenticationParam,\n//     backEndUrl,\n//     backEndUrlSSIP\n// } from \"../config\"\n\nconst axios=require('axios')\n\n\n// export const getEditJsonData=(data) => {\n//     return (dispatch) => {\n\n//         dispatch({\n//             type: 'UPDATE_INPUT_DATA',\n//             payload: data\n//         })\n\n//     }\n// }\n\n// export const getUpdatingSchemaData=(data) => {\n//     return (dispatch) => {\n\n//         dispatch({\n//             type: 'GETTING_SCHEMA_UPDATING_FIELD_RESPONSE',\n//             payload: data\n//         })\n\n//     }\n// }\n// export const getUpdatingSchemaDataOne=(data) => {\n//     return (dispatch) => {\n\n//         dispatch({\n//             type: 'GETTING_SCHEMA_UPDATING_FIELD_RESPONSE_ONE',\n//             payload: data\n//         })\n\n//     }\n\n\n// }\n// export const getUpdatingSchemaDataTwo=(data) => {\n//     return (dispatch) => {\n\n//         dispatch({\n//             type: 'GETTING_SCHEMA_UPDATING_FIELD_RESPONSE_TWO',\n//             payload: data\n//         })\n\n//     }\n// }\n\n// export const getUpdatingSchema=(fieldData) => {\n//     return (dispatch) => {\n\n//         // dispatch({\n//         //     type: 'GETTING_SCHEMA_UPDATING_META_RESPONSE',\n//         //     payload: metaData,\n\n//         // })\n//         dispatch({\n//             type: 'GETTING_SCHEMA_UPDATING_ONLY_SHOWING_RESPONSE',\n//             payload: fieldData,\n\n//         })\n\n//     }\n// }\nexport const getState=(data) => {\n    return (dispatch) => {\n        dispatch({\n            type: 'GETTING_STATE',\n            payload: data\n\n        })\n    }\n}\nexport const getCreatedNewEntity=(data) => {\n\n    console.log(data,'response');\n    return (dispatch) => {\n        axios.post(`http://localhost:8080/api/tutorials`,data\n\n        )\n            .then(response => {\n                // let address={}\n                // let state=[]\n\n                // let array=response.data\n                // for(let i=0; i<array.length; i++) {\n                //     // address[array[i].location]=array[i].state\n                //     address[array[i].state]=array[i].location\n\n                //     state.push({'label': array[i].state,'value': array[i].state})\n                // }\n                // console.log(state,'state',address,'address');\n                dispatch({\n                    type: 'GETTING_CREATED_RESPONSE',\n                    payload: response.data\n\n                })\n                // dispatch({\n                //     type: 'GETTING_STATE',\n                //     payload: state\n\n                // })\n                // dispatch({\n                //     type: 'GETTING_ADDRESS',\n                //     payload: address\n\n                // })\n\n\n            })\n            .catch(error => {\n\n                let showError=error.toString()\n\n            })\n    }\n}\n\nexport const getPostingData=() => {\n    return (dispatch) => {\n        axios.get(`http://localhost:8080/api/tutorials`,\n            {\n                // params: authenticationParam\n            }\n        )\n            .then(response => {\n\n\n                let address={}\n                let state=[]\n\n                let array=response.data\n                for(let i=0; i<array.length; i++) {\n                    // address[array[i].location]=array[i].state\n                    address[array[i].state]=array[i].location\n\n                    state.push({'label': array[i].state,'value': array[i].state})\n                }\n                // console.log(state,'state',address,'address');\n                dispatch({\n                    type: 'GETTING_LOCATION_RESPONSE',\n                    payload: response.data\n\n                })\n                dispatch({\n                    type: 'GETTING_STATE',\n                    payload: state\n\n                })\n                dispatch({\n                    type: 'GETTING_ADDRESS',\n                    payload: address\n\n                })\n\n\n            })\n            .catch(error => {\n\n                let showError=error.toString()\n\n            })\n    }\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,KAAK,GAACC,OAAO,CAAC,OAAD,CAAnB,C,CAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;AACA,OAAO,MAAMC,QAAQ,GAAEC,IAAD,IAAU;EAC5B,OAAQC,QAAD,IAAc;IACjBA,QAAQ,CAAC;MACLC,IAAI,EAAE,eADD;MAELC,OAAO,EAAEH;IAFJ,CAAD,CAAR;EAKH,CAND;AAOH,CARM;AASP,OAAO,MAAMI,mBAAmB,GAAEJ,IAAD,IAAU;EAEvCK,OAAO,CAACC,GAAR,CAAYN,IAAZ,EAAiB,UAAjB;EACA,OAAQC,QAAD,IAAc;IACjBJ,KAAK,CAACU,IAAN,CAAY,qCAAZ,EAAiDP,IAAjD,EAGKQ,IAHL,CAGUC,QAAQ,IAAI;MACd;MACA;MAEA;MACA;MACA;MACA;MAEA;MACA;MACA;MACAR,QAAQ,CAAC;QACLC,IAAI,EAAE,0BADD;QAELC,OAAO,EAAEM,QAAQ,CAACT;MAFb,CAAD,CAAR,CAZc,CAiBd;MACA;MACA;MAEA;MACA;MACA;MACA;MAEA;IAGH,CAhCL,EAiCKU,KAjCL,CAiCWC,KAAK,IAAI;MAEZ,IAAIC,SAAS,GAACD,KAAK,CAACE,QAAN,EAAd;IAEH,CArCL;EAsCH,CAvCD;AAwCH,CA3CM;AA6CP,OAAO,MAAMC,cAAc,GAAC,MAAM;EAC9B,OAAQb,QAAD,IAAc;IACjBJ,KAAK,CAACkB,GAAN,CAAW,qCAAX,EACI,CACI;IADJ,CADJ,EAKKP,IALL,CAKUC,QAAQ,IAAI;MAGd,IAAIO,OAAO,GAAC,EAAZ;MACA,IAAIC,KAAK,GAAC,EAAV;MAEA,IAAIC,KAAK,GAACT,QAAQ,CAACT,IAAnB;;MACA,KAAI,IAAImB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,KAAK,CAACE,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;QAC9B;QACAH,OAAO,CAACE,KAAK,CAACC,CAAD,CAAL,CAASF,KAAV,CAAP,GAAwBC,KAAK,CAACC,CAAD,CAAL,CAASE,QAAjC;QAEAJ,KAAK,CAACK,IAAN,CAAW;UAAC,SAASJ,KAAK,CAACC,CAAD,CAAL,CAASF,KAAnB;UAAyB,SAASC,KAAK,CAACC,CAAD,CAAL,CAASF;QAA3C,CAAX;MACH,CAZa,CAad;;;MACAhB,QAAQ,CAAC;QACLC,IAAI,EAAE,2BADD;QAELC,OAAO,EAAEM,QAAQ,CAACT;MAFb,CAAD,CAAR;MAKAC,QAAQ,CAAC;QACLC,IAAI,EAAE,eADD;QAELC,OAAO,EAAEc;MAFJ,CAAD,CAAR;MAKAhB,QAAQ,CAAC;QACLC,IAAI,EAAE,iBADD;QAELC,OAAO,EAAEa;MAFJ,CAAD,CAAR;IAOH,CApCL,EAqCKN,KArCL,CAqCWC,KAAK,IAAI;MAEZ,IAAIC,SAAS,GAACD,KAAK,CAACE,QAAN,EAAd;IAEH,CAzCL;EA0CH,CA3CD;AA4CH,CA7CM"},"metadata":{},"sourceType":"module"}